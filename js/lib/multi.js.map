{
  "version": 3,
  "file": "C:/Users/Tine/Tine/Studium/Thesis/Code/public/js/lib/multi.js",
  "sources": [
    "events.js",
    "util.js",
    "../lib/watch.js",
    "../lib/q.js",
    "../shared/SyncedObject.js",
    "../shared/CustomMessageSender.js",
    "../shared/player.js",
    "../shared/session.js",
    "player.js",
    "../shared/PubSub.js",
    "messages.js",
    "session.js",
    "../shared/color.js",
    "../shared/errors.js",
    "token.js",
    "../plugins/screens/index.js",
    "../plugins/screens/HorizontalArranger.js",
    "multi.js"
  ],
  "names": [],
  "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AClcA,AD2cA;AC1chjOA,ADkOA;ACjOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AChzWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvDA,ADwDA;ACvzHA,AD0HA;ACzrIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjFA,ADkFA;ACjrWA,ADsWA;ACr
  "sourcesContent": [
    "\n/**\n* Simple wrapper, so you can require('events') on client side\n* without using browserify.\n* @module client/events\n*/\n\ndefine('events',['require','exports','module','socket.io'],function(require, exports, module) {\n\t'use strict';\n\n\t/**\n\t * @classdesc EventEmitter from from socket.io\n\t * @mixin\n\t * @class\n\t * @see {@link https://github.com/LearnBoost/socket.io-client/blob/master/lib/emitter.js}\n\t */\n\texports.EventEmitter = require('socket.io').EventEmitter;\n\n});",
    "\n/**\n* Collection of util functions and required polyfills.\n* @module client/util\n*/\n\ndefine('util',['require','exports','module','socket.io'],function(require, exports, module) {\n\t'use strict';\n\n\t/**\n\t* Inherit the prototype methods from one constructor into another.\n\t* <br/><br/>\n\t* From the socket.io util package. See {@link https://github.com/LearnBoost/socket.io-client}\n\t*\n\t* @param {function} ctor Constructor function which needs to inherit the\n\t* prototype.\n\t* @param {function} superCtor Constructor function to inherit prototype from.\n\t* @example\n\t* var ChildClass = function () {\n\t*   SuperClass.apply(this, arguments);\n\t*   this.name = 'childClass';\n\t* };\n\t* util.inherits(ChildClass, SuperClass);\n\t*/\n\texports.inherits = require('socket.io').util.inherit;\n\n\n\t/* Function.bind-polyfill from \n\t* https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Compatibility\n\t* This is needed to support older browsers without proper\n\t* ECMAScript 5.1 support. Especially PhantomJS that's running\n\t* the tests of this project will throw errors without this\n\t* polyfill.\n\t* See https://groups.google.com/forum/#!msg/phantomjs/r0hPOmnCUpc/uxusqsl2LNoJ\n\t*/\n\tif (!Function.prototype.bind) {\n\t\tFunction.prototype.bind = function (oThis) {\n\t\t\tif (typeof this !== 'function') {\n\t\t\t\t// closest thing possible to the ECMAScript 5 internal IsCallable function\n\t\t\t\tthrow new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n\t\t\t}\n\n\t\t\tvar aArgs = Array.prototype.slice.call(arguments, 1);\n\t\t\tvar fToBind = this;\n\t\t\tvar FNOP = function () {};\n\t\t\tvar fBound = function () {\n\t\t\t\tvar isValid = this instanceof FNOP && oThis;\n\t\t\t\treturn fToBind.apply(isValid ? this : oThis,\n\t\t\t\t\taArgs.concat(Array.prototype.slice.call(arguments))\n\t\t\t\t);\n\t\t\t};\n\n\t\t\tFNOP.prototype = this.prototype;\n\t\t\tfBound.prototype = new FNOP();\n\n\t\t\treturn fBound;\n\t\t};\n\t}\n\n});",
    "\n/**\r\n * DEVELOPED BY\r\n * GIL LOPES BUENO\r\n * gilbueno.mail@gmail.com\r\n *\r\n * WORKS WITH:\r\n * IE 9+, FF 4+, SF 5+, WebKit, CH 7+, OP 12+, BESEN, Rhino 1.7+\r\n *\r\n * FORK:\r\n * https://github.com/melanke/Watch.JS\r\n */\r\n\r\n\"use strict\";\r\n(function (factory) {\r\n    if (typeof exports === 'object') {\r\n        // Node. Does not work with strict CommonJS, but\r\n        // only CommonJS-like enviroments that support module.exports,\r\n        // like Node.\r\n        module.exports = factory();\r\n    } else if (typeof define === 'function' && define.amd) {\r\n        // AMD. Register as an anonymous module.\r\n        define('../lib/watch',factory);\r\n    } else {\r\n        // Browser globals\r\n        window.WatchJS = factory();\r\n        window.watch = window.WatchJS.watch;\r\n        window.unwatch = window.WatchJS.unwatch;\r\n        window.callWatchers = window.WatchJS.callWatchers;\r\n    }\r\n}(function () {\r\n\r\n    var WatchJS = {\r\n        noMore: false\r\n    },\r\n    lengthsubjects = [];\r\n\r\n    var isFunction = function (functionToCheck) {\r\n            var getType = {};\r\n            return functionToCheck && getType.toString.call(functionToCheck) == '[object Function]';\r\n    };\r\n\r\n    var isInt = function (x) {\r\n        return x % 1 === 0;\r\n    };\r\n\r\n    var isArray = function(obj) {\r\n        return Object.prototype.toString.call(obj) === '[object Array]';\r\n    };\r\n\r\n    var getObjDiff = function(a, b){\r\n        var aplus = [],\r\n        bplus = [];\r\n\r\n        if(!(typeof a == \"string\") && !(typeof b == \"string\")){\r\n\r\n            if (isArray(a)) {\r\n                for (var i=0; i<a.length; i++) {\r\n                    if (b[i] === undefined) aplus.push(i);\r\n                }\r\n            } else {\r\n                for(var i in a){\r\n                    if (a.hasOwnProperty(i)) {\r\n                        if(b[i] === undefined) {\r\n                            aplus.push(i);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (isArray(b)) {\r\n                for (var j=0; j<b.length; j++) {\r\n                    if (a[j] === undefined) bplus.push(j);\r\n                }\r\n            } else {\r\n                for(var j in b){\r\n                    if (b.hasOwnProperty(j)) {\r\n                        if(a[j] === undefined) {\r\n                            bplus.push(j);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            added: aplus,\r\n            removed: bplus\r\n        }\r\n    };\r\n\r\n    var clone = function(obj){\r\n\r\n        if (null == obj || \"object\" != typeof obj) {\r\n            return obj;\r\n        }\r\n\r\n        var copy = obj.constructor();\r\n\r\n        for (var attr in obj) {\r\n            copy[attr] = obj[attr];\r\n        }\r\n\r\n        return copy;\r\n\r\n    }\r\n\r\n    var defineGetAndSet = function (obj, propName, getter, setter) {\r\n        try {\r\n\r\n            Object.observe(obj[propName], function(data){\r\n                setter(data); //TODO: adapt our callback data to match Object.observe data spec\r\n            }); \r\n\r\n        } catch(e) {\r\n\r\n            try {\r\n                    Object.defineProperty(obj, propName, {\r\n                            get: getter,\r\n                            set: setter,\r\n                            enumerable: true,\r\n                            configurable: true\r\n                    });\r\n            } catch(e2) {\r\n                try{\r\n                    Object.prototype.__defineGetter__.call(obj, propName, getter);\r\n                    Object.prototype.__defineSetter__.call(obj, propName, setter);\r\n                } catch(e3) {\r\n                    throw new Error(\"watchJS error: browser not supported :/\")\r\n                }\r\n            }\r\n\r\n        }\r\n    };\r\n\r\n    var defineProp = function (obj, propName, value) {\r\n        try {\r\n            Object.defineProperty(obj, propName, {\r\n                enumerable: false,\r\n                configurable: true,\r\n                writable: false,\r\n                value: value\r\n            });\r\n        } catch(error) {\r\n            obj[propName] = value;\r\n        }\r\n    };\r\n\r\n    var watch = function () {\r\n\r\n        if (isFunction(arguments[1])) {\r\n            watchAll.apply(this, arguments);\r\n        } else if (isArray(arguments[1])) {\r\n            watchMany.apply(this, arguments);\r\n        } else {\r\n            watchOne.apply(this, arguments);\r\n        }\r\n\r\n    };\r\n\r\n\r\n    var watchAll = function (obj, watcher, level, addNRemove) {\r\n\r\n        if ((typeof obj == \"string\") || (!(obj instanceof Object) && !isArray(obj))) { //accepts only objects and array (not string)\r\n            return;\r\n        }\r\n\r\n        var props = [];\r\n\r\n\r\n        if(isArray(obj)) {\r\n            for (var prop = 0; prop < obj.length; prop++) { //for each item if obj is an array\r\n                props.push(prop); //put in the props\r\n            }\r\n        } else {\r\n            for (var prop2 in obj) { //for each attribute if obj is an object\r\n                if (obj.hasOwnProperty(prop2)) {\r\n                    props.push(prop2); //put in the props\r\n                }\r\n            }\r\n        }\r\n\r\n        watchMany(obj, props, watcher, level, addNRemove); //watch all items of the props\r\n\r\n        if (addNRemove) {\r\n            pushToLengthSubjects(obj, \"$$watchlengthsubjectroot\", watcher, level);\r\n        }\r\n    };\r\n\r\n\r\n    var watchMany = function (obj, props, watcher, level, addNRemove) {\r\n\r\n        if ((typeof obj == \"string\") || (!(obj instanceof Object) && !isArray(obj))) { //accepts only objects and array (not string)\r\n            return;\r\n        }\r\n\r\n        for (var prop in props) { //watch each attribute of \"props\" if is an object\r\n            if (props.hasOwnProperty(prop)) {\r\n                watchOne(obj, props[prop], watcher, level, addNRemove);\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    var watchOne = function (obj, prop, watcher, level, addNRemove) {\r\n\r\n        if ((typeof obj == \"string\") || (!(obj instanceof Object) && !isArray(obj))) { //accepts only objects and array (not string)\r\n            return;\r\n        }\r\n\r\n        if(isFunction(obj[prop])) { //dont watch if it is a function\r\n            return;\r\n        }\r\n\r\n        if(obj[prop] != null && (level === undefined || level > 0)){\r\n            watchAll(obj[prop], watcher, level!==undefined? level-1 : level); //recursively watch all attributes of this\r\n        }\r\n\r\n        defineWatcher(obj, prop, watcher, level);\r\n\r\n        if(addNRemove && (level === undefined || level > 0)){\r\n            pushToLengthSubjects(obj, prop, watcher, level);\r\n        }\r\n\r\n    };\r\n\r\n    var unwatch = function () {\r\n\r\n        if (isFunction(arguments[1])) {\r\n            unwatchAll.apply(this, arguments);\r\n        } else if (isArray(arguments[1])) {\r\n            unwatchMany.apply(this, arguments);\r\n        } else {\r\n            unwatchOne.apply(this, arguments);\r\n        }\r\n\r\n    };\r\n\r\n    var unwatchAll = function (obj, watcher) {\r\n\r\n        if (obj instanceof String || (!(obj instanceof Object) && !isArray(obj))) { //accepts only objects and array (not string)\r\n            return;\r\n        }\r\n\r\n        var props = [];\r\n\r\n\r\n        if (isArray(obj)) {\r\n            for (var prop = 0; prop < obj.length; prop++) { //for each item if obj is an array\r\n                props.push(prop); //put in the props\r\n            }\r\n        } else {\r\n            for (var prop2 in obj) { //for each attribute if obj is an object\r\n                if (obj.hasOwnProperty(prop2)) {\r\n                    props.push(prop2); //put in the props\r\n                }\r\n            }\r\n        }\r\n\r\n        unwatchMany(obj, props, watcher); //watch all itens of the props\r\n    };\r\n\r\n\r\n    var unwatchMany = function (obj, props, watcher) {\r\n\r\n        for (var prop2 in props) { //watch each attribute of \"props\" if is an object\r\n            if (props.hasOwnProperty(prop2)) {\r\n                unwatchOne(obj, props[prop2], watcher);\r\n            }\r\n        }\r\n    };\r\n\r\n    var defineWatcher = function (obj, prop, watcher, level) {\r\n\r\n        var val = obj[prop];\r\n\r\n        watchFunctions(obj, prop);\r\n\r\n        if (!obj.watchers) {\r\n            defineProp(obj, \"watchers\", {});\r\n        }\r\n\r\n        if (!obj.watchers[prop]) {\r\n            obj.watchers[prop] = [];\r\n        }\r\n\r\n        for (var i=0; i<obj.watchers[prop].length; i++) {\r\n            if(obj.watchers[prop][i] === watcher){\r\n                return;\r\n            }\r\n        }\r\n\r\n\r\n        obj.watchers[prop].push(watcher); //add the new watcher in the watchers array\r\n\r\n\r\n        var getter = function () {\r\n            return val;\r\n        };\r\n\r\n\r\n        var setter = function (newval) {\r\n            var oldval = val;\r\n            val = newval;\r\n\r\n            if (level !== 0 && obj[prop]){\r\n                // watch sub properties\r\n                watchAll(obj[prop], watcher, (level===undefined)?level:level-1);\r\n            }\r\n\r\n            watchFunctions(obj, prop);\r\n\r\n            if (!WatchJS.noMore){\r\n                //if (JSON.stringify(oldval) !== JSON.stringify(newval)) {\r\n                if (oldval !== newval) {\r\n                    callWatchers(obj, prop, \"set\", newval, oldval);\r\n                    WatchJS.noMore = false;\r\n                }\r\n            }\r\n        };\r\n\r\n        defineGetAndSet(obj, prop, getter, setter);\r\n\r\n    };\r\n\r\n    var callWatchers = function (obj, prop, action, newval, oldval) {\r\n        if (prop) {\r\n            for (var wr=0; wr<obj.watchers[prop].length; wr++) {\r\n                obj.watchers[prop][wr].call(obj, prop, action, newval, oldval);\r\n            }\r\n        } else {\r\n            for (var prop in obj) {//call all\r\n                if (obj.hasOwnProperty(prop)) {\r\n                    callWatchers(obj, prop, action, newval, oldval);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    // @todo code related to \"watchFunctions\" is certainly buggy\r\n    var methodNames = ['pop', 'push', 'reverse', 'shift', 'sort', 'slice', 'unshift'];\r\n    var defineArrayMethodWatcher = function (obj, prop, original, methodName) {\r\n        defineProp(obj[prop], methodName, function () {\r\n            var response = original.apply(obj[prop], arguments);\r\n            watchOne(obj, obj[prop]);\r\n            if (methodName !== 'slice') {\r\n                callWatchers(obj, prop, methodName,arguments);\r\n            }\r\n            return response;\r\n        });\r\n    };\r\n\r\n    var watchFunctions = function(obj, prop) {\r\n\r\n        if ((!obj[prop]) || (obj[prop] instanceof String) || (!isArray(obj[prop]))) {\r\n            return;\r\n        }\r\n\r\n        for (var i = methodNames.length, methodName; i--;) {\r\n            methodName = methodNames[i];\r\n            defineArrayMethodWatcher(obj, prop, obj[prop][methodName], methodName);\r\n        }\r\n\r\n    };\r\n\r\n    var unwatchOne = function (obj, prop, watcher) {\r\n        for (var i=0; i<obj.watchers[prop].length; i++) {\r\n            var w = obj.watchers[prop][i];\r\n\r\n            if(w == watcher) {\r\n                obj.watchers[prop].splice(i, 1);\r\n            }\r\n        }\r\n\r\n        removeFromLengthSubjects(obj, prop, watcher);\r\n    };\r\n\r\n    var loop = function(){\r\n\r\n        for(var i=0; i<lengthsubjects.length; i++) {\r\n\r\n            var subj = lengthsubjects[i];\r\n\r\n            if (subj.prop === \"$$watchlengthsubjectroot\") {\r\n\r\n                var difference = getObjDiff(subj.obj, subj.actual);\r\n\r\n                if(difference.added.length || difference.removed.length){\r\n                    if(difference.added.length){\r\n                        watchMany(subj.obj, difference.added, subj.watcher, subj.level - 1, true);\r\n                    }\r\n\r\n                    subj.watcher.call(subj.obj, \"root\", \"differentattr\", difference, subj.actual);\r\n                }\r\n                subj.actual = clone(subj.obj);\r\n\r\n\r\n            } else {\r\n\r\n                var difference = getObjDiff(subj.obj[subj.prop], subj.actual);\r\n            \r\n                if(difference.added.length || difference.removed.length){\r\n                    if(difference.added.length){\r\n                        for (var j=0; j<subj.obj.watchers[subj.prop].length; j++) {\r\n                            watchMany(subj.obj[subj.prop], difference.added, subj.obj.watchers[subj.prop][j], subj.level - 1, true);\r\n                        }\r\n                    }\r\n\r\n                    callWatchers(subj.obj, subj.prop, \"differentattr\", difference, subj.actual);\r\n                }\r\n\r\n                subj.actual = clone(subj.obj[subj.prop]);\r\n\r\n            }\r\n\r\n        }\r\n\r\n    };\r\n\r\n    var pushToLengthSubjects = function(obj, prop, watcher, level){\r\n        \r\n        var actual;\r\n\r\n        if (prop === \"$$watchlengthsubjectroot\") {\r\n            actual =  clone(obj);\r\n        } else {\r\n            actual = clone(obj[prop]);\r\n        }\r\n\r\n        lengthsubjects.push({\r\n            obj: obj,\r\n            prop: prop,\r\n            actual: actual,\r\n            watcher: watcher,\r\n            level: level\r\n        });\r\n    };\r\n\r\n    var removeFromLengthSubjects = function(obj, prop, watcher){\r\n\r\n        for (var i=0; i<lengthsubjects.length; i++) {\r\n            var subj = lengthsubjects[i];\r\n\r\n            if (subj.obj == obj && subj.prop == prop && subj.watcher == watcher) {\r\n                lengthsubjects.splice(i, 1);\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    setInterval(loop, 50);\r\n\r\n    WatchJS.watch = watch;\r\n    WatchJS.unwatch = unwatch;\r\n    WatchJS.callWatchers = callWatchers;\r\n\r\n    return WatchJS;\r\n\r\n}));\r\n",
    "\n// vim:ts=4:sts=4:sw=4:\r\n/*!\r\n *\r\n * Copyright 2009-2012 Kris Kowal under the terms of the MIT\r\n * license found at http://github.com/kriskowal/q/raw/master/LICENSE\r\n *\r\n * With parts by Tyler Close\r\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\r\n * at http://www.opensource.org/licenses/mit-license.html\r\n * Forked at ref_send.js version: 2009-05-11\r\n *\r\n * With parts by Mark Miller\r\n * Copyright (C) 2011 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\n\r\n(function (definition) {\r\n    // Turn off strict mode for this function so we can assign to global.Q\r\n    /* jshint strict: false */\r\n\r\n    // This file will function properly as a <script> tag, or a module\r\n    // using CommonJS and NodeJS or RequireJS module formats.  In\r\n    // Common/Node/RequireJS, the module exports the Q API and when\r\n    // executed as a simple <script>, it creates a Q global instead.\r\n\r\n    // Montage Require\r\n    if (typeof bootstrap === \"function\") {\r\n        bootstrap(\"promise\", definition);\r\n\r\n    // CommonJS\r\n    } else if (typeof exports === \"object\") {\r\n        module.exports = definition();\r\n\r\n    // RequireJS\r\n    } else if (typeof define === \"function\" && define.amd) {\r\n        define('../lib/q',definition);\r\n\r\n    // SES (Secure EcmaScript)\r\n    } else if (typeof ses !== \"undefined\") {\r\n        if (!ses.ok()) {\r\n            return;\r\n        } else {\r\n            ses.makeQ = definition;\r\n        }\r\n\r\n    // <script>\r\n    } else {\r\n        Q = definition();\r\n    }\r\n\r\n})(function () {\r\n\"use strict\";\r\n\r\nvar hasStacks = false;\r\ntry {\r\n    throw new Error();\r\n} catch (e) {\r\n    hasStacks = !!e.stack;\r\n}\r\n\r\n// All code after this point will be filtered from stack traces reported\r\n// by Q.\r\nvar qStartingLine = captureLine();\r\nvar qFileName;\r\n\r\n// shims\r\n\r\n// used for fallback in \"allResolved\"\r\nvar noop = function () {};\r\n\r\n// Use the fastest possible means to execute a task in a future turn\r\n// of the event loop.\r\nvar nextTick =(function () {\r\n    // linked list of tasks (single, with head node)\r\n    var head = {task: void 0, next: null};\r\n    var tail = head;\r\n    var flushing = false;\r\n    var requestTick = void 0;\r\n    var isNodeJS = false;\r\n\r\n    function flush() {\r\n        /* jshint loopfunc: true */\r\n\r\n        while (head.next) {\r\n            head = head.next;\r\n            var task = head.task;\r\n            head.task = void 0;\r\n            var domain = head.domain;\r\n\r\n            if (domain) {\r\n                head.domain = void 0;\r\n                domain.enter();\r\n            }\r\n\r\n            try {\r\n                task();\r\n\r\n            } catch (e) {\r\n                if (isNodeJS) {\r\n                    // In node, uncaught exceptions are considered fatal errors.\r\n                    // Re-throw them synchronously to interrupt flushing!\r\n\r\n                    // Ensure continuation if the uncaught exception is suppressed\r\n                    // listening \"uncaughtException\" events (as domains does).\r\n                    // Continue in next event to avoid tick recursion.\r\n                    if (domain) {\r\n                        domain.exit();\r\n                    }\r\n                    setTimeout(flush, 0);\r\n                    if (domain) {\r\n                        domain.enter();\r\n                    }\r\n\r\n                    throw e;\r\n\r\n                } else {\r\n                    // In browsers, uncaught exceptions are not fatal.\r\n                    // Re-throw them asynchronously to avoid slow-downs.\r\n                    setTimeout(function() {\r\n                       throw e;\r\n                    }, 0);\r\n                }\r\n            }\r\n\r\n            if (domain) {\r\n                domain.exit();\r\n            }\r\n        }\r\n\r\n        flushing = false;\r\n    }\r\n\r\n    nextTick = function (task) {\r\n        tail = tail.next = {\r\n            task: task,\r\n            domain: isNodeJS && process.domain,\r\n            next: null\r\n        };\r\n\r\n        if (!flushing) {\r\n            flushing = true;\r\n            requestTick();\r\n        }\r\n    };\r\n\r\n    if (typeof process !== \"undefined\" && process.nextTick) {\r\n        // Node.js before 0.9. Note that some fake-Node environments, like the\r\n        // Mocha test runner, introduce a `process` global without a `nextTick`.\r\n        isNodeJS = true;\r\n\r\n        requestTick = function () {\r\n            process.nextTick(flush);\r\n        };\r\n\r\n    } else if (typeof setImmediate === \"function\") {\r\n        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\r\n        if (typeof window !== \"undefined\") {\r\n            requestTick = setImmediate.bind(window, flush);\r\n        } else {\r\n            requestTick = function () {\r\n                setImmediate(flush);\r\n            };\r\n        }\r\n\r\n    } else if (typeof MessageChannel !== \"undefined\") {\r\n        // modern browsers\r\n        // http://www.nonblocking.io/2011/06/windownexttick.html\r\n        var channel = new MessageChannel();\r\n        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\r\n        // working message ports the first time a page loads.\r\n        channel.port1.onmessage = function () {\r\n            requestTick = requestPortTick;\r\n            channel.port1.onmessage = flush;\r\n            flush();\r\n        };\r\n        var requestPortTick = function () {\r\n            // Opera requires us to provide a message payload, regardless of\r\n            // whether we use it.\r\n            channel.port2.postMessage(0);\r\n        };\r\n        requestTick = function () {\r\n            setTimeout(flush, 0);\r\n            requestPortTick();\r\n        };\r\n\r\n    } else {\r\n        // old browsers\r\n        requestTick = function () {\r\n            setTimeout(flush, 0);\r\n        };\r\n    }\r\n\r\n    return nextTick;\r\n})();\r\n\r\n// Attempt to make generics safe in the face of downstream\r\n// modifications.\r\n// There is no situation where this is necessary.\r\n// If you need a security guarantee, these primordials need to be\r\n// deeply frozen anyway, and if you don’t need a security guarantee,\r\n// this is just plain paranoid.\r\n// However, this **might** have the nice side-effect of reducing the size of\r\n// the minified code by reducing x.call() to merely x()\r\n// See Mark Miller’s explanation of what this does.\r\n// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\r\nvar call = Function.call;\r\nfunction uncurryThis(f) {\r\n    return function () {\r\n        return call.apply(f, arguments);\r\n    };\r\n}\r\n// This is equivalent, but slower:\r\n// uncurryThis = Function_bind.bind(Function_bind.call);\r\n// http://jsperf.com/uncurrythis\r\n\r\nvar array_slice = uncurryThis(Array.prototype.slice);\r\n\r\nvar array_reduce = uncurryThis(\r\n    Array.prototype.reduce || function (callback, basis) {\r\n        var index = 0,\r\n            length = this.length;\r\n        // concerning the initial value, if one is not provided\r\n        if (arguments.length === 1) {\r\n            // seek to the first value in the array, accounting\r\n            // for the possibility that is is a sparse array\r\n            do {\r\n                if (index in this) {\r\n                    basis = this[index++];\r\n                    break;\r\n                }\r\n                if (++index >= length) {\r\n                    throw new TypeError();\r\n                }\r\n            } while (1);\r\n        }\r\n        // reduce\r\n        for (; index < length; index++) {\r\n            // account for the possibility that the array is sparse\r\n            if (index in this) {\r\n                basis = callback(basis, this[index], index);\r\n            }\r\n        }\r\n        return basis;\r\n    }\r\n);\r\n\r\nvar array_indexOf = uncurryThis(\r\n    Array.prototype.indexOf || function (value) {\r\n        // not a very good shim, but good enough for our one use of it\r\n        for (var i = 0; i < this.length; i++) {\r\n            if (this[i] === value) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n);\r\n\r\nvar array_map = uncurryThis(\r\n    Array.prototype.map || function (callback, thisp) {\r\n        var self = this;\r\n        var collect = [];\r\n        array_reduce(self, function (undefined, value, index) {\r\n            collect.push(callback.call(thisp, value, index, self));\r\n        }, void 0);\r\n        return collect;\r\n    }\r\n);\r\n\r\nvar object_create = Object.create || function (prototype) {\r\n    function Type() { }\r\n    Type.prototype = prototype;\r\n    return new Type();\r\n};\r\n\r\nvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\r\n\r\nvar object_keys = Object.keys || function (object) {\r\n    var keys = [];\r\n    for (var key in object) {\r\n        if (object_hasOwnProperty(object, key)) {\r\n            keys.push(key);\r\n        }\r\n    }\r\n    return keys;\r\n};\r\n\r\nvar object_toString = uncurryThis(Object.prototype.toString);\r\n\r\nfunction isObject(value) {\r\n    return value === Object(value);\r\n}\r\n\r\n// generator related shims\r\n\r\n// FIXME: Remove this function once ES6 generators are in SpiderMonkey.\r\nfunction isStopIteration(exception) {\r\n    return (\r\n        object_toString(exception) === \"[object StopIteration]\" ||\r\n        exception instanceof QReturnValue\r\n    );\r\n}\r\n\r\n// FIXME: Remove this helper and Q.return once ES6 generators are in\r\n// SpiderMonkey.\r\nvar QReturnValue;\r\nif (typeof ReturnValue !== \"undefined\") {\r\n    QReturnValue = ReturnValue;\r\n} else {\r\n    QReturnValue = function (value) {\r\n        this.value = value;\r\n    };\r\n}\r\n\r\n// Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\r\n// engine that has a deployed base of browsers that support generators.\r\n// However, SM's generators use the Python-inspired semantics of\r\n// outdated ES6 drafts.  We would like to support ES6, but we'd also\r\n// like to make it possible to use generators in deployed browsers, so\r\n// we also support Python-style generators.  At some point we can remove\r\n// this block.\r\nvar hasES6Generators;\r\ntry {\r\n    /* jshint evil: true, nonew: false */\r\n    new Function(\"(function* (){ yield 1; })\");\r\n    hasES6Generators = true;\r\n} catch (e) {\r\n    hasES6Generators = false;\r\n}\r\n\r\n// long stack traces\r\n\r\nvar STACK_JUMP_SEPARATOR = \"From previous event:\";\r\n\r\nfunction makeStackTraceLong(error, promise) {\r\n    // If possible, transform the error stack trace by removing Node and Q\r\n    // cruft, then concatenating with the stack trace of `promise`. See #57.\r\n    if (hasStacks &&\r\n        promise.stack &&\r\n        typeof error === \"object\" &&\r\n        error !== null &&\r\n        error.stack &&\r\n        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1\r\n    ) {\r\n        var stacks = [];\r\n        for (var p = promise; !!p; p = p.source) {\r\n            if (p.stack) {\r\n                stacks.unshift(p.stack);\r\n            }\r\n        }\r\n        stacks.unshift(error.stack);\r\n\r\n        var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\r\n        error.stack = filterStackString(concatedStacks);\r\n    }\r\n}\r\n\r\nfunction filterStackString(stackString) {\r\n    var lines = stackString.split(\"\\n\");\r\n    var desiredLines = [];\r\n    for (var i = 0; i < lines.length; ++i) {\r\n        var line = lines[i];\r\n\r\n        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\r\n            desiredLines.push(line);\r\n        }\r\n    }\r\n    return desiredLines.join(\"\\n\");\r\n}\r\n\r\nfunction isNodeFrame(stackLine) {\r\n    return stackLine.indexOf(\"(module.js:\") !== -1 ||\r\n           stackLine.indexOf(\"(node.js:\") !== -1;\r\n}\r\n\r\nfunction getFileNameAndLineNumber(stackLine) {\r\n    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\r\n    // In IE10 function name can have spaces (\"Anonymous function\") O_o\r\n    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\r\n    if (attempt1) {\r\n        return [attempt1[1], Number(attempt1[2])];\r\n    }\r\n\r\n    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\r\n    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\r\n    if (attempt2) {\r\n        return [attempt2[1], Number(attempt2[2])];\r\n    }\r\n\r\n    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\r\n    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\r\n    if (attempt3) {\r\n        return [attempt3[1], Number(attempt3[2])];\r\n    }\r\n}\r\n\r\nfunction isInternalFrame(stackLine) {\r\n    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\r\n\r\n    if (!fileNameAndLineNumber) {\r\n        return false;\r\n    }\r\n\r\n    var fileName = fileNameAndLineNumber[0];\r\n    var lineNumber = fileNameAndLineNumber[1];\r\n\r\n    return fileName === qFileName &&\r\n        lineNumber >= qStartingLine &&\r\n        lineNumber <= qEndingLine;\r\n}\r\n\r\n// discover own file name and line number range for filtering stack\r\n// traces\r\nfunction captureLine() {\r\n    if (!hasStacks) {\r\n        return;\r\n    }\r\n\r\n    try {\r\n        throw new Error();\r\n    } catch (e) {\r\n        var lines = e.stack.split(\"\\n\");\r\n        var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\r\n        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\r\n        if (!fileNameAndLineNumber) {\r\n            return;\r\n        }\r\n\r\n        qFileName = fileNameAndLineNumber[0];\r\n        return fileNameAndLineNumber[1];\r\n    }\r\n}\r\n\r\nfunction deprecate(callback, name, alternative) {\r\n    return function () {\r\n        if (typeof console !== \"undefined\" &&\r\n            typeof console.warn === \"function\") {\r\n            console.warn(name + \" is deprecated, use \" + alternative +\r\n                         \" instead.\", new Error(\"\").stack);\r\n        }\r\n        return callback.apply(callback, arguments);\r\n    };\r\n}\r\n\r\n// end of shims\r\n// beginning of real work\r\n\r\n/**\r\n * Constructs a promise for an immediate reference, passes promises through, or\r\n * coerces promises from different systems.\r\n * @param value immediate reference or promise\r\n */\r\nfunction Q(value) {\r\n    // If the object is already a Promise, return it directly.  This enables\r\n    // the resolve function to both be used to created references from objects,\r\n    // but to tolerably coerce non-promises to promises.\r\n    if (isPromise(value)) {\r\n        return value;\r\n    }\r\n\r\n    // assimilate thenables\r\n    if (isPromiseAlike(value)) {\r\n        return coerce(value);\r\n    } else {\r\n        return fulfill(value);\r\n    }\r\n}\r\nQ.resolve = Q;\r\n\r\n/**\r\n * Performs a task in a future turn of the event loop.\r\n * @param {Function} task\r\n */\r\nQ.nextTick = nextTick;\r\n\r\n/**\r\n * Controls whether or not long stack traces will be on\r\n */\r\nQ.longStackSupport = false;\r\n\r\n/**\r\n * Constructs a {promise, resolve, reject} object.\r\n *\r\n * `resolve` is a callback to invoke with a more resolved value for the\r\n * promise. To fulfill the promise, invoke `resolve` with any value that is\r\n * not a thenable. To reject the promise, invoke `resolve` with a rejected\r\n * thenable, or invoke `reject` with the reason directly. To resolve the\r\n * promise to another thenable, thus putting it in the same state, invoke\r\n * `resolve` with that other thenable.\r\n */\r\nQ.defer = defer;\r\nfunction defer() {\r\n    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\r\n    // been resolved.  If it is \"undefined\", it has been resolved.  Each\r\n    // element of the messages array is itself an array of complete arguments to\r\n    // forward to the resolved promise.  We coerce the resolution value to a\r\n    // promise using the `resolve` function because it handles both fully\r\n    // non-thenable values and other thenables gracefully.\r\n    var messages = [], progressListeners = [], resolvedPromise;\r\n\r\n    var deferred = object_create(defer.prototype);\r\n    var promise = object_create(Promise.prototype);\r\n\r\n    promise.promiseDispatch = function (resolve, op, operands) {\r\n        var args = array_slice(arguments);\r\n        if (messages) {\r\n            messages.push(args);\r\n            if (op === \"when\" && operands[1]) { // progress operand\r\n                progressListeners.push(operands[1]);\r\n            }\r\n        } else {\r\n            nextTick(function () {\r\n                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\r\n            });\r\n        }\r\n    };\r\n\r\n    // XXX deprecated\r\n    promise.valueOf = function () {\r\n        if (messages) {\r\n            return promise;\r\n        }\r\n        var nearerValue = nearer(resolvedPromise);\r\n        if (isPromise(nearerValue)) {\r\n            resolvedPromise = nearerValue; // shorten chain\r\n        }\r\n        return nearerValue;\r\n    };\r\n\r\n    promise.inspect = function () {\r\n        if (!resolvedPromise) {\r\n            return { state: \"pending\" };\r\n        }\r\n        return resolvedPromise.inspect();\r\n    };\r\n\r\n    if (Q.longStackSupport && hasStacks) {\r\n        try {\r\n            throw new Error();\r\n        } catch (e) {\r\n            // NOTE: don't try to use `Error.captureStackTrace` or transfer the\r\n            // accessor around; that causes memory leaks as per GH-111. Just\r\n            // reify the stack trace as a string ASAP.\r\n            //\r\n            // At the same time, cut off the first line; it's always just\r\n            // \"[object Promise]\\n\", as per the `toString`.\r\n            promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\r\n        }\r\n    }\r\n\r\n    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\r\n    // consolidating them into `become`, since otherwise we'd create new\r\n    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\r\n\r\n    function become(newPromise) {\r\n        resolvedPromise = newPromise;\r\n        promise.source = newPromise;\r\n\r\n        array_reduce(messages, function (undefined, message) {\r\n            nextTick(function () {\r\n                newPromise.promiseDispatch.apply(newPromise, message);\r\n            });\r\n        }, void 0);\r\n\r\n        messages = void 0;\r\n        progressListeners = void 0;\r\n    }\r\n\r\n    deferred.promise = promise;\r\n    deferred.resolve = function (value) {\r\n        if (resolvedPromise) {\r\n            return;\r\n        }\r\n\r\n        become(Q(value));\r\n    };\r\n\r\n    deferred.fulfill = function (value) {\r\n        if (resolvedPromise) {\r\n            return;\r\n        }\r\n\r\n        become(fulfill(value));\r\n    };\r\n    deferred.reject = function (reason) {\r\n        if (resolvedPromise) {\r\n            return;\r\n        }\r\n\r\n        become(reject(reason));\r\n    };\r\n    deferred.notify = function (progress) {\r\n        if (resolvedPromise) {\r\n            return;\r\n        }\r\n\r\n        array_reduce(progressListeners, function (undefined, progressListener) {\r\n            nextTick(function () {\r\n                progressListener(progress);\r\n            });\r\n        }, void 0);\r\n    };\r\n\r\n    return deferred;\r\n}\r\n\r\n/**\r\n * Creates a Node-style callback that will resolve or reject the deferred\r\n * promise.\r\n * @returns a nodeback\r\n */\r\ndefer.prototype.makeNodeResolver = function () {\r\n    var self = this;\r\n    return function (error, value) {\r\n        if (error) {\r\n            self.reject(error);\r\n        } else if (arguments.length > 2) {\r\n            self.resolve(array_slice(arguments, 1));\r\n        } else {\r\n            self.resolve(value);\r\n        }\r\n    };\r\n};\r\n\r\n/**\r\n * @param resolver {Function} a function that returns nothing and accepts\r\n * the resolve, reject, and notify functions for a deferred.\r\n * @returns a promise that may be resolved with the given resolve and reject\r\n * functions, or rejected by a thrown exception in resolver\r\n */\r\nQ.promise = promise;\r\nfunction promise(resolver) {\r\n    if (typeof resolver !== \"function\") {\r\n        throw new TypeError(\"resolver must be a function.\");\r\n    }\r\n    var deferred = defer();\r\n    try {\r\n        resolver(deferred.resolve, deferred.reject, deferred.notify);\r\n    } catch (reason) {\r\n        deferred.reject(reason);\r\n    }\r\n    return deferred.promise;\r\n}\r\n\r\n// XXX experimental.  This method is a way to denote that a local value is\r\n// serializable and should be immediately dispatched to a remote upon request,\r\n// instead of passing a reference.\r\nQ.passByCopy = function (object) {\r\n    //freeze(object);\r\n    //passByCopies.set(object, true);\r\n    return object;\r\n};\r\n\r\nPromise.prototype.passByCopy = function () {\r\n    //freeze(object);\r\n    //passByCopies.set(object, true);\r\n    return this;\r\n};\r\n\r\n/**\r\n * If two promises eventually fulfill to the same value, promises that value,\r\n * but otherwise rejects.\r\n * @param x {Any*}\r\n * @param y {Any*}\r\n * @returns {Any*} a promise for x and y if they are the same, but a rejection\r\n * otherwise.\r\n *\r\n */\r\nQ.join = function (x, y) {\r\n    return Q(x).join(y);\r\n};\r\n\r\nPromise.prototype.join = function (that) {\r\n    return Q([this, that]).spread(function (x, y) {\r\n        if (x === y) {\r\n            // TODO: \"===\" should be Object.is or equiv\r\n            return x;\r\n        } else {\r\n            throw new Error(\"Can't join: not the same: \" + x + \" \" + y);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Returns a promise for the first of an array of promises to become fulfilled.\r\n * @param answers {Array[Any*]} promises to race\r\n * @returns {Any*} the first promise to be fulfilled\r\n */\r\nQ.race = race;\r\nfunction race(answerPs) {\r\n    return promise(function(resolve, reject) {\r\n        // Switch to this once we can assume at least ES5\r\n        // answerPs.forEach(function(answerP) {\r\n        //     Q(answerP).then(resolve, reject);\r\n        // });\r\n        // Use this in the meantime\r\n        for (var i = 0, len = answerPs.length; i < len; i++) {\r\n            Q(answerPs[i]).then(resolve, reject);\r\n        }\r\n    });\r\n}\r\n\r\nPromise.prototype.race = function () {\r\n    return this.then(Q.race);\r\n};\r\n\r\n/**\r\n * Constructs a Promise with a promise descriptor object and optional fallback\r\n * function.  The descriptor contains methods like when(rejected), get(name),\r\n * set(name, value), post(name, args), and delete(name), which all\r\n * return either a value, a promise for a value, or a rejection.  The fallback\r\n * accepts the operation name, a resolver, and any further arguments that would\r\n * have been forwarded to the appropriate method above had a method been\r\n * provided with the proper name.  The API makes no guarantees about the nature\r\n * of the returned object, apart from that it is usable whereever promises are\r\n * bought and sold.\r\n */\r\nQ.makePromise = Promise;\r\nfunction Promise(descriptor, fallback, inspect) {\r\n    if (fallback === void 0) {\r\n        fallback = function (op) {\r\n            return reject(new Error(\r\n                \"Promise does not support operation: \" + op\r\n            ));\r\n        };\r\n    }\r\n    if (inspect === void 0) {\r\n        inspect = function () {\r\n            return {state: \"unknown\"};\r\n        };\r\n    }\r\n\r\n    var promise = object_create(Promise.prototype);\r\n\r\n    promise.promiseDispatch = function (resolve, op, args) {\r\n        var result;\r\n        try {\r\n            if (descriptor[op]) {\r\n                result = descriptor[op].apply(promise, args);\r\n            } else {\r\n                result = fallback.call(promise, op, args);\r\n            }\r\n        } catch (exception) {\r\n            result = reject(exception);\r\n        }\r\n        if (resolve) {\r\n            resolve(result);\r\n        }\r\n    };\r\n\r\n    promise.inspect = inspect;\r\n\r\n    // XXX deprecated `valueOf` and `exception` support\r\n    if (inspect) {\r\n        var inspected = inspect();\r\n        if (inspected.state === \"rejected\") {\r\n            promise.exception = inspected.reason;\r\n        }\r\n\r\n        promise.valueOf = function () {\r\n            var inspected = inspect();\r\n            if (inspected.state === \"pending\" ||\r\n                inspected.state === \"rejected\") {\r\n                return promise;\r\n            }\r\n            return inspected.value;\r\n        };\r\n    }\r\n\r\n    return promise;\r\n}\r\n\r\nPromise.prototype.toString = function () {\r\n    return \"[object Promise]\";\r\n};\r\n\r\nPromise.prototype.then = function (fulfilled, rejected, progressed) {\r\n    var self = this;\r\n    var deferred = defer();\r\n    var done = false;   // ensure the untrusted promise makes at most a\r\n                        // single call to one of the callbacks\r\n\r\n    function _fulfilled(value) {\r\n        try {\r\n            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\r\n        } catch (exception) {\r\n            return reject(exception);\r\n        }\r\n    }\r\n\r\n    function _rejected(exception) {\r\n        if (typeof rejected === \"function\") {\r\n            makeStackTraceLong(exception, self);\r\n            try {\r\n                return rejected(exception);\r\n            } catch (newException) {\r\n                return reject(newException);\r\n            }\r\n        }\r\n        return reject(exception);\r\n    }\r\n\r\n    function _progressed(value) {\r\n        return typeof progressed === \"function\" ? progressed(value) : value;\r\n    }\r\n\r\n    nextTick(function () {\r\n        self.promiseDispatch(function (value) {\r\n            if (done) {\r\n                return;\r\n            }\r\n            done = true;\r\n\r\n            deferred.resolve(_fulfilled(value));\r\n        }, \"when\", [function (exception) {\r\n            if (done) {\r\n                return;\r\n            }\r\n            done = true;\r\n\r\n            deferred.resolve(_rejected(exception));\r\n        }]);\r\n    });\r\n\r\n    // Progress propagator need to be attached in the current tick.\r\n    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\r\n        var newValue;\r\n        var threw = false;\r\n        try {\r\n            newValue = _progressed(value);\r\n        } catch (e) {\r\n            threw = true;\r\n            if (Q.onerror) {\r\n                Q.onerror(e);\r\n            } else {\r\n                throw e;\r\n            }\r\n        }\r\n\r\n        if (!threw) {\r\n            deferred.notify(newValue);\r\n        }\r\n    }]);\r\n\r\n    return deferred.promise;\r\n};\r\n\r\n/**\r\n * Registers an observer on a promise.\r\n *\r\n * Guarantees:\r\n *\r\n * 1. that fulfilled and rejected will be called only once.\r\n * 2. that either the fulfilled callback or the rejected callback will be\r\n *    called, but not both.\r\n * 3. that fulfilled and rejected will not be called in this turn.\r\n *\r\n * @param value      promise or immediate reference to observe\r\n * @param fulfilled  function to be called with the fulfilled value\r\n * @param rejected   function to be called with the rejection exception\r\n * @param progressed function to be called on any progress notifications\r\n * @return promise for the return value from the invoked callback\r\n */\r\nQ.when = when;\r\nfunction when(value, fulfilled, rejected, progressed) {\r\n    return Q(value).then(fulfilled, rejected, progressed);\r\n}\r\n\r\nPromise.prototype.thenResolve = function (value) {\r\n    return this.then(function () { return value; });\r\n};\r\n\r\nQ.thenResolve = function (promise, value) {\r\n    return Q(promise).thenResolve(value);\r\n};\r\n\r\nPromise.prototype.thenReject = function (reason) {\r\n    return this.then(function () { throw reason; });\r\n};\r\n\r\nQ.thenReject = function (promise, reason) {\r\n    return Q(promise).thenReject(reason);\r\n};\r\n\r\n/**\r\n * If an object is not a promise, it is as \"near\" as possible.\r\n * If a promise is rejected, it is as \"near\" as possible too.\r\n * If it’s a fulfilled promise, the fulfillment value is nearer.\r\n * If it’s a deferred promise and the deferred has been resolved, the\r\n * resolution is \"nearer\".\r\n * @param object\r\n * @returns most resolved (nearest) form of the object\r\n */\r\n\r\n// XXX should we re-do this?\r\nQ.nearer = nearer;\r\nfunction nearer(value) {\r\n    if (isPromise(value)) {\r\n        var inspected = value.inspect();\r\n        if (inspected.state === \"fulfilled\") {\r\n            return inspected.value;\r\n        }\r\n    }\r\n    return value;\r\n}\r\n\r\n/**\r\n * @returns whether the given object is a promise.\r\n * Otherwise it is a fulfilled value.\r\n */\r\nQ.isPromise = isPromise;\r\nfunction isPromise(object) {\r\n    return isObject(object) &&\r\n        typeof object.promiseDispatch === \"function\" &&\r\n        typeof object.inspect === \"function\";\r\n}\r\n\r\nQ.isPromiseAlike = isPromiseAlike;\r\nfunction isPromiseAlike(object) {\r\n    return isObject(object) && typeof object.then === \"function\";\r\n}\r\n\r\n/**\r\n * @returns whether the given object is a pending promise, meaning not\r\n * fulfilled or rejected.\r\n */\r\nQ.isPending = isPending;\r\nfunction isPending(object) {\r\n    return isPromise(object) && object.inspect().state === \"pending\";\r\n}\r\n\r\nPromise.prototype.isPending = function () {\r\n    return this.inspect().state === \"pending\";\r\n};\r\n\r\n/**\r\n * @returns whether the given object is a value or fulfilled\r\n * promise.\r\n */\r\nQ.isFulfilled = isFulfilled;\r\nfunction isFulfilled(object) {\r\n    return !isPromise(object) || object.inspect().state === \"fulfilled\";\r\n}\r\n\r\nPromise.prototype.isFulfilled = function () {\r\n    return this.inspect().state === \"fulfilled\";\r\n};\r\n\r\n/**\r\n * @returns whether the given object is a rejected promise.\r\n */\r\nQ.isRejected = isRejected;\r\nfunction isRejected(object) {\r\n    return isPromise(object) && object.inspect().state === \"rejected\";\r\n}\r\n\r\nPromise.prototype.isRejected = function () {\r\n    return this.inspect().state === \"rejected\";\r\n};\r\n\r\n//// BEGIN UNHANDLED REJECTION TRACKING\r\n\r\n// This promise library consumes exceptions thrown in handlers so they can be\r\n// handled by a subsequent promise.  The exceptions get added to this array when\r\n// they are created, and removed when they are handled.  Note that in ES6 or\r\n// shimmed environments, this would naturally be a `Set`.\r\nvar unhandledReasons = [];\r\nvar unhandledRejections = [];\r\nvar unhandledReasonsDisplayed = false;\r\nvar trackUnhandledRejections = true;\r\nfunction displayUnhandledReasons() {\r\n    if (\r\n        !unhandledReasonsDisplayed &&\r\n        typeof window !== \"undefined\" &&\r\n        window.console\r\n    ) {\r\n        console.warn(\"[Q] Unhandled rejection reasons (should be empty):\",\r\n                     unhandledReasons);\r\n    }\r\n\r\n    unhandledReasonsDisplayed = true;\r\n}\r\n\r\nfunction logUnhandledReasons() {\r\n    for (var i = 0; i < unhandledReasons.length; i++) {\r\n        var reason = unhandledReasons[i];\r\n        console.warn(\"Unhandled rejection reason:\", reason);\r\n    }\r\n}\r\n\r\nfunction resetUnhandledRejections() {\r\n    unhandledReasons.length = 0;\r\n    unhandledRejections.length = 0;\r\n    unhandledReasonsDisplayed = false;\r\n\r\n    if (!trackUnhandledRejections) {\r\n        trackUnhandledRejections = true;\r\n\r\n        // Show unhandled rejection reasons if Node exits without handling an\r\n        // outstanding rejection.  (Note that Browserify presently produces a\r\n        // `process` global without the `EventEmitter` `on` method.)\r\n        if (typeof process !== \"undefined\" && process.on) {\r\n            process.on(\"exit\", logUnhandledReasons);\r\n        }\r\n    }\r\n}\r\n\r\nfunction trackRejection(promise, reason) {\r\n    if (!trackUnhandledRejections) {\r\n        return;\r\n    }\r\n\r\n    unhandledRejections.push(promise);\r\n    if (reason && typeof reason.stack !== \"undefined\") {\r\n        unhandledReasons.push(reason.stack);\r\n    } else {\r\n        unhandledReasons.push(\"(no stack) \" + reason);\r\n    }\r\n    displayUnhandledReasons();\r\n}\r\n\r\nfunction untrackRejection(promise) {\r\n    if (!trackUnhandledRejections) {\r\n        return;\r\n    }\r\n\r\n    var at = array_indexOf(unhandledRejections, promise);\r\n    if (at !== -1) {\r\n        unhandledRejections.splice(at, 1);\r\n        unhandledReasons.splice(at, 1);\r\n    }\r\n}\r\n\r\nQ.resetUnhandledRejections = resetUnhandledRejections;\r\n\r\nQ.getUnhandledReasons = function () {\r\n    // Make a copy so that consumers can't interfere with our internal state.\r\n    return unhandledReasons.slice();\r\n};\r\n\r\nQ.stopUnhandledRejectionTracking = function () {\r\n    resetUnhandledRejections();\r\n    if (typeof process !== \"undefined\" && process.on) {\r\n        process.removeListener(\"exit\", logUnhandledReasons);\r\n    }\r\n    trackUnhandledRejections = false;\r\n};\r\n\r\nresetUnhandledRejections();\r\n\r\n//// END UNHANDLED REJECTION TRACKING\r\n\r\n/**\r\n * Constructs a rejected promise.\r\n * @param reason value describing the failure\r\n */\r\nQ.reject = reject;\r\nfunction reject(reason) {\r\n    var rejection = Promise({\r\n        \"when\": function (rejected) {\r\n            // note that the error has been handled\r\n            if (rejected) {\r\n                untrackRejection(this);\r\n            }\r\n            return rejected ? rejected(reason) : this;\r\n        }\r\n    }, function fallback() {\r\n        return this;\r\n    }, function inspect() {\r\n        return { state: \"rejected\", reason: reason };\r\n    });\r\n\r\n    // Note that the reason has not been handled.\r\n    trackRejection(rejection, reason);\r\n\r\n    return rejection;\r\n}\r\n\r\n/**\r\n * Constructs a fulfilled promise for an immediate reference.\r\n * @param value immediate reference\r\n */\r\nQ.fulfill = fulfill;\r\nfunction fulfill(value) {\r\n    return Promise({\r\n        \"when\": function () {\r\n            return value;\r\n        },\r\n        \"get\": function (name) {\r\n            return value[name];\r\n        },\r\n        \"set\": function (name, rhs) {\r\n            value[name] = rhs;\r\n        },\r\n        \"delete\": function (name) {\r\n            delete value[name];\r\n        },\r\n        \"post\": function (name, args) {\r\n            // Mark Miller proposes that post with no name should apply a\r\n            // promised function.\r\n            if (name === null || name === void 0) {\r\n                return value.apply(void 0, args);\r\n            } else {\r\n                return value[name].apply(value, args);\r\n            }\r\n        },\r\n        \"apply\": function (thisp, args) {\r\n            return value.apply(thisp, args);\r\n        },\r\n        \"keys\": function () {\r\n            return object_keys(value);\r\n        }\r\n    }, void 0, function inspect() {\r\n        return { state: \"fulfilled\", value: value };\r\n    });\r\n}\r\n\r\n/**\r\n * Converts thenables to Q promises.\r\n * @param promise thenable promise\r\n * @returns a Q promise\r\n */\r\nfunction coerce(promise) {\r\n    var deferred = defer();\r\n    nextTick(function () {\r\n        try {\r\n            promise.then(deferred.resolve, deferred.reject, deferred.notify);\r\n        } catch (exception) {\r\n            deferred.reject(exception);\r\n        }\r\n    });\r\n    return deferred.promise;\r\n}\r\n\r\n/**\r\n * Annotates an object such that it will never be\r\n * transferred away from this process over any promise\r\n * communication channel.\r\n * @param object\r\n * @returns promise a wrapping of that object that\r\n * additionally responds to the \"isDef\" message\r\n * without a rejection.\r\n */\r\nQ.master = master;\r\nfunction master(object) {\r\n    return Promise({\r\n        \"isDef\": function () {}\r\n    }, function fallback(op, args) {\r\n        return dispatch(object, op, args);\r\n    }, function () {\r\n        return Q(object).inspect();\r\n    });\r\n}\r\n\r\n/**\r\n * Spreads the values of a promised array of arguments into the\r\n * fulfillment callback.\r\n * @param fulfilled callback that receives variadic arguments from the\r\n * promised array\r\n * @param rejected callback that receives the exception if the promise\r\n * is rejected.\r\n * @returns a promise for the return value or thrown exception of\r\n * either callback.\r\n */\r\nQ.spread = spread;\r\nfunction spread(value, fulfilled, rejected) {\r\n    return Q(value).spread(fulfilled, rejected);\r\n}\r\n\r\nPromise.prototype.spread = function (fulfilled, rejected) {\r\n    return this.all().then(function (array) {\r\n        return fulfilled.apply(void 0, array);\r\n    }, rejected);\r\n};\r\n\r\n/**\r\n * The async function is a decorator for generator functions, turning\r\n * them into asynchronous generators.  Although generators are only part\r\n * of the newest ECMAScript 6 drafts, this code does not cause syntax\r\n * errors in older engines.  This code should continue to work and will\r\n * in fact improve over time as the language improves.\r\n *\r\n * ES6 generators are currently part of V8 version 3.19 with the\r\n * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\r\n * for longer, but under an older Python-inspired form.  This function\r\n * works on both kinds of generators.\r\n *\r\n * Decorates a generator function such that:\r\n *  - it may yield promises\r\n *  - execution will continue when that promise is fulfilled\r\n *  - the value of the yield expression will be the fulfilled value\r\n *  - it returns a promise for the return value (when the generator\r\n *    stops iterating)\r\n *  - the decorated function returns a promise for the return value\r\n *    of the generator or the first rejected promise among those\r\n *    yielded.\r\n *  - if an error is thrown in the generator, it propagates through\r\n *    every following yield until it is caught, or until it escapes\r\n *    the generator function altogether, and is translated into a\r\n *    rejection for the promise returned by the decorated generator.\r\n */\r\nQ.async = async;\r\nfunction async(makeGenerator) {\r\n    return function () {\r\n        // when verb is \"send\", arg is a value\r\n        // when verb is \"throw\", arg is an exception\r\n        function continuer(verb, arg) {\r\n            var result;\r\n            if (hasES6Generators) {\r\n                try {\r\n                    result = generator[verb](arg);\r\n                } catch (exception) {\r\n                    return reject(exception);\r\n                }\r\n                if (result.done) {\r\n                    return result.value;\r\n                } else {\r\n                    return when(result.value, callback, errback);\r\n                }\r\n            } else {\r\n                // FIXME: Remove this case when SM does ES6 generators.\r\n                try {\r\n                    result = generator[verb](arg);\r\n                } catch (exception) {\r\n                    if (isStopIteration(exception)) {\r\n                        return exception.value;\r\n                    } else {\r\n                        return reject(exception);\r\n                    }\r\n                }\r\n                return when(result, callback, errback);\r\n            }\r\n        }\r\n        var generator = makeGenerator.apply(this, arguments);\r\n        var callback = continuer.bind(continuer, \"next\");\r\n        var errback = continuer.bind(continuer, \"throw\");\r\n        return callback();\r\n    };\r\n}\r\n\r\n/**\r\n * The spawn function is a small wrapper around async that immediately\r\n * calls the generator and also ends the promise chain, so that any\r\n * unhandled errors are thrown instead of forwarded to the error\r\n * handler. This is useful because it's extremely common to run\r\n * generators at the top-level to work with libraries.\r\n */\r\nQ.spawn = spawn;\r\nfunction spawn(makeGenerator) {\r\n    Q.done(Q.async(makeGenerator)());\r\n}\r\n\r\n// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\r\n/**\r\n * Throws a ReturnValue exception to stop an asynchronous generator.\r\n *\r\n * This interface is a stop-gap measure to support generator return\r\n * values in older Firefox/SpiderMonkey.  In browsers that support ES6\r\n * generators like Chromium 29, just use \"return\" in your generator\r\n * functions.\r\n *\r\n * @param value the return value for the surrounding generator\r\n * @throws ReturnValue exception with the value.\r\n * @example\r\n * // ES6 style\r\n * Q.async(function* () {\r\n *      var foo = yield getFooPromise();\r\n *      var bar = yield getBarPromise();\r\n *      return foo + bar;\r\n * })\r\n * // Older SpiderMonkey style\r\n * Q.async(function () {\r\n *      var foo = yield getFooPromise();\r\n *      var bar = yield getBarPromise();\r\n *      Q.return(foo + bar);\r\n * })\r\n */\r\nQ[\"return\"] = _return;\r\nfunction _return(value) {\r\n    throw new QReturnValue(value);\r\n}\r\n\r\n/**\r\n * The promised function decorator ensures that any promise arguments\r\n * are settled and passed as values (`this` is also settled and passed\r\n * as a value).  It will also ensure that the result of a function is\r\n * always a promise.\r\n *\r\n * @example\r\n * var add = Q.promised(function (a, b) {\r\n *     return a + b;\r\n * });\r\n * add(Q(a), Q(B));\r\n *\r\n * @param {function} callback The function to decorate\r\n * @returns {function} a function that has been decorated.\r\n */\r\nQ.promised = promised;\r\nfunction promised(callback) {\r\n    return function () {\r\n        return spread([this, all(arguments)], function (self, args) {\r\n            return callback.apply(self, args);\r\n        });\r\n    };\r\n}\r\n\r\n/**\r\n * sends a message to a value in a future turn\r\n * @param object* the recipient\r\n * @param op the name of the message operation, e.g., \"when\",\r\n * @param args further arguments to be forwarded to the operation\r\n * @returns result {Promise} a promise for the result of the operation\r\n */\r\nQ.dispatch = dispatch;\r\nfunction dispatch(object, op, args) {\r\n    return Q(object).dispatch(op, args);\r\n}\r\n\r\nPromise.prototype.dispatch = function (op, args) {\r\n    var self = this;\r\n    var deferred = defer();\r\n    nextTick(function () {\r\n        self.promiseDispatch(deferred.resolve, op, args);\r\n    });\r\n    return deferred.promise;\r\n};\r\n\r\n/**\r\n * Gets the value of a property in a future turn.\r\n * @param object    promise or immediate reference for target object\r\n * @param name      name of property to get\r\n * @return promise for the property value\r\n */\r\nQ.get = function (object, key) {\r\n    return Q(object).dispatch(\"get\", [key]);\r\n};\r\n\r\nPromise.prototype.get = function (key) {\r\n    return this.dispatch(\"get\", [key]);\r\n};\r\n\r\n/**\r\n * Sets the value of a property in a future turn.\r\n * @param object    promise or immediate reference for object object\r\n * @param name      name of property to set\r\n * @param value     new value of property\r\n * @return promise for the return value\r\n */\r\nQ.set = function (object, key, value) {\r\n    return Q(object).dispatch(\"set\", [key, value]);\r\n};\r\n\r\nPromise.prototype.set = function (key, value) {\r\n    return this.dispatch(\"set\", [key, value]);\r\n};\r\n\r\n/**\r\n * Deletes a property in a future turn.\r\n * @param object    promise or immediate reference for target object\r\n * @param name      name of property to delete\r\n * @return promise for the return value\r\n */\r\nQ.del = // XXX legacy\r\nQ[\"delete\"] = function (object, key) {\r\n    return Q(object).dispatch(\"delete\", [key]);\r\n};\r\n\r\nPromise.prototype.del = // XXX legacy\r\nPromise.prototype[\"delete\"] = function (key) {\r\n    return this.dispatch(\"delete\", [key]);\r\n};\r\n\r\n/**\r\n * Invokes a method in a future turn.\r\n * @param object    promise or immediate reference for target object\r\n * @param name      name of method to invoke\r\n * @param value     a value to post, typically an array of\r\n *                  invocation arguments for promises that\r\n *                  are ultimately backed with `resolve` values,\r\n *                  as opposed to those backed with URLs\r\n *                  wherein the posted value can be any\r\n *                  JSON serializable object.\r\n * @return promise for the return value\r\n */\r\n// bound locally because it is used by other methods\r\nQ.mapply = // XXX As proposed by \"Redsandro\"\r\nQ.post = function (object, name, args) {\r\n    return Q(object).dispatch(\"post\", [name, args]);\r\n};\r\n\r\nPromise.prototype.mapply = // XXX As proposed by \"Redsandro\"\r\nPromise.prototype.post = function (name, args) {\r\n    return this.dispatch(\"post\", [name, args]);\r\n};\r\n\r\n/**\r\n * Invokes a method in a future turn.\r\n * @param object    promise or immediate reference for target object\r\n * @param name      name of method to invoke\r\n * @param ...args   array of invocation arguments\r\n * @return promise for the return value\r\n */\r\nQ.send = // XXX Mark Miller's proposed parlance\r\nQ.mcall = // XXX As proposed by \"Redsandro\"\r\nQ.invoke = function (object, name /*...args*/) {\r\n    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\r\n};\r\n\r\nPromise.prototype.send = // XXX Mark Miller's proposed parlance\r\nPromise.prototype.mcall = // XXX As proposed by \"Redsandro\"\r\nPromise.prototype.invoke = function (name /*...args*/) {\r\n    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\r\n};\r\n\r\n/**\r\n * Applies the promised function in a future turn.\r\n * @param object    promise or immediate reference for target function\r\n * @param args      array of application arguments\r\n */\r\nQ.fapply = function (object, args) {\r\n    return Q(object).dispatch(\"apply\", [void 0, args]);\r\n};\r\n\r\nPromise.prototype.fapply = function (args) {\r\n    return this.dispatch(\"apply\", [void 0, args]);\r\n};\r\n\r\n/**\r\n * Calls the promised function in a future turn.\r\n * @param object    promise or immediate reference for target function\r\n * @param ...args   array of application arguments\r\n */\r\nQ[\"try\"] =\r\nQ.fcall = function (object /* ...args*/) {\r\n    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\r\n};\r\n\r\nPromise.prototype.fcall = function (/*...args*/) {\r\n    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\r\n};\r\n\r\n/**\r\n * Binds the promised function, transforming return values into a fulfilled\r\n * promise and thrown errors into a rejected one.\r\n * @param object    promise or immediate reference for target function\r\n * @param ...args   array of application arguments\r\n */\r\nQ.fbind = function (object /*...args*/) {\r\n    var promise = Q(object);\r\n    var args = array_slice(arguments, 1);\r\n    return function fbound() {\r\n        return promise.dispatch(\"apply\", [\r\n            this,\r\n            args.concat(array_slice(arguments))\r\n        ]);\r\n    };\r\n};\r\nPromise.prototype.fbind = function (/*...args*/) {\r\n    var promise = this;\r\n    var args = array_slice(arguments);\r\n    return function fbound() {\r\n        return promise.dispatch(\"apply\", [\r\n            this,\r\n            args.concat(array_slice(arguments))\r\n        ]);\r\n    };\r\n};\r\n\r\n/**\r\n * Requests the names of the owned properties of a promised\r\n * object in a future turn.\r\n * @param object    promise or immediate reference for target object\r\n * @return promise for the keys of the eventually settled object\r\n */\r\nQ.keys = function (object) {\r\n    return Q(object).dispatch(\"keys\", []);\r\n};\r\n\r\nPromise.prototype.keys = function () {\r\n    return this.dispatch(\"keys\", []);\r\n};\r\n\r\n/**\r\n * Turns an array of promises into a promise for an array.  If any of\r\n * the promises gets rejected, the whole array is rejected immediately.\r\n * @param {Array*} an array (or promise for an array) of values (or\r\n * promises for values)\r\n * @returns a promise for an array of the corresponding values\r\n */\r\n// By Mark Miller\r\n// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\r\nQ.all = all;\r\nfunction all(promises) {\r\n    return when(promises, function (promises) {\r\n        var countDown = 0;\r\n        var deferred = defer();\r\n        array_reduce(promises, function (undefined, promise, index) {\r\n            var snapshot;\r\n            if (\r\n                isPromise(promise) &&\r\n                (snapshot = promise.inspect()).state === \"fulfilled\"\r\n            ) {\r\n                promises[index] = snapshot.value;\r\n            } else {\r\n                ++countDown;\r\n                when(\r\n                    promise,\r\n                    function (value) {\r\n                        promises[index] = value;\r\n                        if (--countDown === 0) {\r\n                            deferred.resolve(promises);\r\n                        }\r\n                    },\r\n                    deferred.reject,\r\n                    function (progress) {\r\n                        deferred.notify({ index: index, value: progress });\r\n                    }\r\n                );\r\n            }\r\n        }, void 0);\r\n        if (countDown === 0) {\r\n            deferred.resolve(promises);\r\n        }\r\n        return deferred.promise;\r\n    });\r\n}\r\n\r\nPromise.prototype.all = function () {\r\n    return all(this);\r\n};\r\n\r\n/**\r\n * Waits for all promises to be settled, either fulfilled or\r\n * rejected.  This is distinct from `all` since that would stop\r\n * waiting at the first rejection.  The promise returned by\r\n * `allResolved` will never be rejected.\r\n * @param promises a promise for an array (or an array) of promises\r\n * (or values)\r\n * @return a promise for an array of promises\r\n */\r\nQ.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\r\nfunction allResolved(promises) {\r\n    return when(promises, function (promises) {\r\n        promises = array_map(promises, Q);\r\n        return when(all(array_map(promises, function (promise) {\r\n            return when(promise, noop, noop);\r\n        })), function () {\r\n            return promises;\r\n        });\r\n    });\r\n}\r\n\r\nPromise.prototype.allResolved = function () {\r\n    return allResolved(this);\r\n};\r\n\r\n/**\r\n * @see Promise#allSettled\r\n */\r\nQ.allSettled = allSettled;\r\nfunction allSettled(promises) {\r\n    return Q(promises).allSettled();\r\n}\r\n\r\n/**\r\n * Turns an array of promises into a promise for an array of their states (as\r\n * returned by `inspect`) when they have all settled.\r\n * @param {Array[Any*]} values an array (or promise for an array) of values (or\r\n * promises for values)\r\n * @returns {Array[State]} an array of states for the respective values.\r\n */\r\nPromise.prototype.allSettled = function () {\r\n    return this.then(function (promises) {\r\n        return all(array_map(promises, function (promise) {\r\n            promise = Q(promise);\r\n            function regardless() {\r\n                return promise.inspect();\r\n            }\r\n            return promise.then(regardless, regardless);\r\n        }));\r\n    });\r\n};\r\n\r\n/**\r\n * Captures the failure of a promise, giving an oportunity to recover\r\n * with a callback.  If the given promise is fulfilled, the returned\r\n * promise is fulfilled.\r\n * @param {Any*} promise for something\r\n * @param {Function} callback to fulfill the returned promise if the\r\n * given promise is rejected\r\n * @returns a promise for the return value of the callback\r\n */\r\nQ.fail = // XXX legacy\r\nQ[\"catch\"] = function (object, rejected) {\r\n    return Q(object).then(void 0, rejected);\r\n};\r\n\r\nPromise.prototype.fail = // XXX legacy\r\nPromise.prototype[\"catch\"] = function (rejected) {\r\n    return this.then(void 0, rejected);\r\n};\r\n\r\n/**\r\n * Attaches a listener that can respond to progress notifications from a\r\n * promise's originating deferred. This listener receives the exact arguments\r\n * passed to ``deferred.notify``.\r\n * @param {Any*} promise for something\r\n * @param {Function} callback to receive any progress notifications\r\n * @returns the given promise, unchanged\r\n */\r\nQ.progress = progress;\r\nfunction progress(object, progressed) {\r\n    return Q(object).then(void 0, void 0, progressed);\r\n}\r\n\r\nPromise.prototype.progress = function (progressed) {\r\n    return this.then(void 0, void 0, progressed);\r\n};\r\n\r\n/**\r\n * Provides an opportunity to observe the settling of a promise,\r\n * regardless of whether the promise is fulfilled or rejected.  Forwards\r\n * the resolution to the returned promise when the callback is done.\r\n * The callback can return a promise to defer completion.\r\n * @param {Any*} promise\r\n * @param {Function} callback to observe the resolution of the given\r\n * promise, takes no arguments.\r\n * @returns a promise for the resolution of the given promise when\r\n * ``fin`` is done.\r\n */\r\nQ.fin = // XXX legacy\r\nQ[\"finally\"] = function (object, callback) {\r\n    return Q(object)[\"finally\"](callback);\r\n};\r\n\r\nPromise.prototype.fin = // XXX legacy\r\nPromise.prototype[\"finally\"] = function (callback) {\r\n    callback = Q(callback);\r\n    return this.then(function (value) {\r\n        return callback.fcall().then(function () {\r\n            return value;\r\n        });\r\n    }, function (reason) {\r\n        // TODO attempt to recycle the rejection with \"this\".\r\n        return callback.fcall().then(function () {\r\n            throw reason;\r\n        });\r\n    });\r\n};\r\n\r\n/**\r\n * Terminates a chain of promises, forcing rejections to be\r\n * thrown as exceptions.\r\n * @param {Any*} promise at the end of a chain of promises\r\n * @returns nothing\r\n */\r\nQ.done = function (object, fulfilled, rejected, progress) {\r\n    return Q(object).done(fulfilled, rejected, progress);\r\n};\r\n\r\nPromise.prototype.done = function (fulfilled, rejected, progress) {\r\n    var onUnhandledError = function (error) {\r\n        // forward to a future turn so that ``when``\r\n        // does not catch it and turn it into a rejection.\r\n        nextTick(function () {\r\n            makeStackTraceLong(error, promise);\r\n            if (Q.onerror) {\r\n                Q.onerror(error);\r\n            } else {\r\n                throw error;\r\n            }\r\n        });\r\n    };\r\n\r\n    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\r\n    var promise = fulfilled || rejected || progress ?\r\n        this.then(fulfilled, rejected, progress) :\r\n        this;\r\n\r\n    if (typeof process === \"object\" && process && process.domain) {\r\n        onUnhandledError = process.domain.bind(onUnhandledError);\r\n    }\r\n\r\n    promise.then(void 0, onUnhandledError);\r\n};\r\n\r\n/**\r\n * Causes a promise to be rejected if it does not get fulfilled before\r\n * some milliseconds time out.\r\n * @param {Any*} promise\r\n * @param {Number} milliseconds timeout\r\n * @param {String} custom error message (optional)\r\n * @returns a promise for the resolution of the given promise if it is\r\n * fulfilled before the timeout, otherwise rejected.\r\n */\r\nQ.timeout = function (object, ms, message) {\r\n    return Q(object).timeout(ms, message);\r\n};\r\n\r\nPromise.prototype.timeout = function (ms, message) {\r\n    var deferred = defer();\r\n    var timeoutId = setTimeout(function () {\r\n        deferred.reject(new Error(message || \"Timed out after \" + ms + \" ms\"));\r\n    }, ms);\r\n\r\n    this.then(function (value) {\r\n        clearTimeout(timeoutId);\r\n        deferred.resolve(value);\r\n    }, function (exception) {\r\n        clearTimeout(timeoutId);\r\n        deferred.reject(exception);\r\n    }, deferred.notify);\r\n\r\n    return deferred.promise;\r\n};\r\n\r\n/**\r\n * Returns a promise for the given value (or promised value), some\r\n * milliseconds after it resolved. Passes rejections immediately.\r\n * @param {Any*} promise\r\n * @param {Number} milliseconds\r\n * @returns a promise for the resolution of the given promise after milliseconds\r\n * time has elapsed since the resolution of the given promise.\r\n * If the given promise rejects, that is passed immediately.\r\n */\r\nQ.delay = function (object, timeout) {\r\n    if (timeout === void 0) {\r\n        timeout = object;\r\n        object = void 0;\r\n    }\r\n    return Q(object).delay(timeout);\r\n};\r\n\r\nPromise.prototype.delay = function (timeout) {\r\n    return this.then(function (value) {\r\n        var deferred = defer();\r\n        setTimeout(function () {\r\n            deferred.resolve(value);\r\n        }, timeout);\r\n        return deferred.promise;\r\n    });\r\n};\r\n\r\n/**\r\n * Passes a continuation to a Node function, which is called with the given\r\n * arguments provided as an array, and returns a promise.\r\n *\r\n *      Q.nfapply(FS.readFile, [__filename])\r\n *      .then(function (content) {\r\n *      })\r\n *\r\n */\r\nQ.nfapply = function (callback, args) {\r\n    return Q(callback).nfapply(args);\r\n};\r\n\r\nPromise.prototype.nfapply = function (args) {\r\n    var deferred = defer();\r\n    var nodeArgs = array_slice(args);\r\n    nodeArgs.push(deferred.makeNodeResolver());\r\n    this.fapply(nodeArgs).fail(deferred.reject);\r\n    return deferred.promise;\r\n};\r\n\r\n/**\r\n * Passes a continuation to a Node function, which is called with the given\r\n * arguments provided individually, and returns a promise.\r\n * @example\r\n * Q.nfcall(FS.readFile, __filename)\r\n * .then(function (content) {\r\n * })\r\n *\r\n */\r\nQ.nfcall = function (callback /*...args*/) {\r\n    var args = array_slice(arguments, 1);\r\n    return Q(callback).nfapply(args);\r\n};\r\n\r\nPromise.prototype.nfcall = function (/*...args*/) {\r\n    var nodeArgs = array_slice(arguments);\r\n    var deferred = defer();\r\n    nodeArgs.push(deferred.makeNodeResolver());\r\n    this.fapply(nodeArgs).fail(deferred.reject);\r\n    return deferred.promise;\r\n};\r\n\r\n/**\r\n * Wraps a NodeJS continuation passing function and returns an equivalent\r\n * version that returns a promise.\r\n * @example\r\n * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\r\n * .then(console.log)\r\n * .done()\r\n */\r\nQ.nfbind =\r\nQ.denodeify = function (callback /*...args*/) {\r\n    var baseArgs = array_slice(arguments, 1);\r\n    return function () {\r\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\r\n        var deferred = defer();\r\n        nodeArgs.push(deferred.makeNodeResolver());\r\n        Q(callback).fapply(nodeArgs).fail(deferred.reject);\r\n        return deferred.promise;\r\n    };\r\n};\r\n\r\nPromise.prototype.nfbind =\r\nPromise.prototype.denodeify = function (/*...args*/) {\r\n    var args = array_slice(arguments);\r\n    args.unshift(this);\r\n    return Q.denodeify.apply(void 0, args);\r\n};\r\n\r\nQ.nbind = function (callback, thisp /*...args*/) {\r\n    var baseArgs = array_slice(arguments, 2);\r\n    return function () {\r\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\r\n        var deferred = defer();\r\n        nodeArgs.push(deferred.makeNodeResolver());\r\n        function bound() {\r\n            return callback.apply(thisp, arguments);\r\n        }\r\n        Q(bound).fapply(nodeArgs).fail(deferred.reject);\r\n        return deferred.promise;\r\n    };\r\n};\r\n\r\nPromise.prototype.nbind = function (/*thisp, ...args*/) {\r\n    var args = array_slice(arguments, 0);\r\n    args.unshift(this);\r\n    return Q.nbind.apply(void 0, args);\r\n};\r\n\r\n/**\r\n * Calls a method of a Node-style object that accepts a Node-style\r\n * callback with a given array of arguments, plus a provided callback.\r\n * @param object an object that has the named method\r\n * @param {String} name name of the method of object\r\n * @param {Array} args arguments to pass to the method; the callback\r\n * will be provided by Q and appended to these arguments.\r\n * @returns a promise for the value or error\r\n */\r\nQ.nmapply = // XXX As proposed by \"Redsandro\"\r\nQ.npost = function (object, name, args) {\r\n    return Q(object).npost(name, args);\r\n};\r\n\r\nPromise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\r\nPromise.prototype.npost = function (name, args) {\r\n    var nodeArgs = array_slice(args || []);\r\n    var deferred = defer();\r\n    nodeArgs.push(deferred.makeNodeResolver());\r\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\r\n    return deferred.promise;\r\n};\r\n\r\n/**\r\n * Calls a method of a Node-style object that accepts a Node-style\r\n * callback, forwarding the given variadic arguments, plus a provided\r\n * callback argument.\r\n * @param object an object that has the named method\r\n * @param {String} name name of the method of object\r\n * @param ...args arguments to pass to the method; the callback will\r\n * be provided by Q and appended to these arguments.\r\n * @returns a promise for the value or error\r\n */\r\nQ.nsend = // XXX Based on Mark Miller's proposed \"send\"\r\nQ.nmcall = // XXX Based on \"Redsandro's\" proposal\r\nQ.ninvoke = function (object, name /*...args*/) {\r\n    var nodeArgs = array_slice(arguments, 2);\r\n    var deferred = defer();\r\n    nodeArgs.push(deferred.makeNodeResolver());\r\n    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\r\n    return deferred.promise;\r\n};\r\n\r\nPromise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\r\nPromise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\r\nPromise.prototype.ninvoke = function (name /*...args*/) {\r\n    var nodeArgs = array_slice(arguments, 1);\r\n    var deferred = defer();\r\n    nodeArgs.push(deferred.makeNodeResolver());\r\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\r\n    return deferred.promise;\r\n};\r\n\r\n/**\r\n * If a function would like to support both Node continuation-passing-style and\r\n * promise-returning-style, it can end its internal promise chain with\r\n * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\r\n * elects to use a nodeback, the result will be sent there.  If they do not\r\n * pass a nodeback, they will receive the result promise.\r\n * @param object a result (or a promise for a result)\r\n * @param {Function} nodeback a Node.js-style callback\r\n * @returns either the promise or nothing\r\n */\r\nQ.nodeify = nodeify;\r\nfunction nodeify(object, nodeback) {\r\n    return Q(object).nodeify(nodeback);\r\n}\r\n\r\nPromise.prototype.nodeify = function (nodeback) {\r\n    if (nodeback) {\r\n        this.then(function (value) {\r\n            nextTick(function () {\r\n                nodeback(null, value);\r\n            });\r\n        }, function (error) {\r\n            nextTick(function () {\r\n                nodeback(error);\r\n            });\r\n        });\r\n    } else {\r\n        return this;\r\n    }\r\n};\r\n\r\n// All code before this point will be filtered from stack traces.\r\nvar qEndingLine = captureLine();\r\n\r\nreturn Q;\r\n\r\n});\r\n",
    "\n/* \n* To use this with require.js AND the node.js module system (on server and client side).\n* see https://github.com/jrburke/amdefine\n*/\nif (typeof define !== 'function') { var define = require('amdefine')(module); }\n\n\ndefine('../shared/SyncedObject',['require','exports','module','../lib/watch','../lib/q','events','util'],function(require, exports, module) {\n\t'use strict';\n\n\tvar WatchJS = require('../lib/watch');\n\tvar Q = require('../lib/q');\n\tvar EventEmitter = require('events').EventEmitter;\n\tvar util = require('util');\n\n\t/**\n\t * @typedef Changeset\n\t * This object describes changes made to the attributes inside the wrapped\n\t * object.\n\t * @memberOf SyncedObject\n\t * @property {Object.<string, *>} changed  any changed top level attributes:\n\t * their new value mapped to their name\n\t * @property {Array.<string>} removed  names of all top level\n\t * attributes that have been deleted\n\t */\n\n\t/**\n\t * @classdesc This class wraps an object and detects when it is changed from\n\t * the outside world.\n\t * @example\n\t * var synced = new SyncedObject();\n\t * synced.on('changed', function (changeset) {\n\t *   console.log(changeset.changed); // { 'foo': 'bar' }\n\t * });\n\t * synced.data.foo = 'bar';\n\t * @class SyncedObject\n\t * @mixes external:EventEmitter\n\t */\n\tvar SyncedObject = function () {\n\n\t\tEventEmitter.call(this);\n\t\tthis._data = {};\n\t\tthis.onAttributesChange = this.onAttributesChange.bind(this);\n\t};\n\n\tutil.inherits(SyncedObject, EventEmitter);\n\n\t/**\n\t * The wrapped data object. Changes to it's top level attributes are\n\t * detected and a {@link SyncedObject#event:changed changed} event is\n\t * fired in this case.\n\t * @type {Object}\n\t * @name data\n\t * @instance\n\t * @memberOf SyncedObject\n\t */\n\tObject.defineProperty(SyncedObject.prototype, 'data', {\n\t\tget: function() {\n\t\t\treturn this._data;\n\t\t},\n\t\tset: function(val) {\n\t\t\tif (typeof val === 'object') {\n\t\t\t\t// remove\n\t\t\t\tfor (var j in this._data) {\n\t\t\t\t\tif (!val.propertyIsEnumerable(j)) {\n\t\t\t\t\t\tdelete this._data[j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// add\n\t\t\t\tfor (var i in val) {\n\t\t\t\t\tthis._data[i] = val[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * Starts detecting changes to the wrapped object.\n\t * @memberOf SyncedObject\n\t */\n\tSyncedObject.prototype.startWatching = function () {\n\t\tWatchJS.watch(this._data, this.onAttributesChange, 0, true);\n\t};\n\n\t/**\n\t * Stops detecting changes to the wrapped object. You can resume watching\n\t * @memberOf SyncedObject\n\t * again any time.\n\t */\n\tSyncedObject.prototype.stopWatching = function () {\n\t\tWatchJS.unwatch(this._data, this.onAttributesChange);\n\t};\n\n\t/**\n\t * Applies the given changeset to the wrapped object without fireing \n\t * a {@link SyncedObject#event:changed changed} event.\n\t * @param  {SyncedObject.Changeset} changeset  changes that should be\n\t *  applied to the wrapped object\n\t * @memberOf SyncedObject\n\t */\n\tSyncedObject.prototype.applyChangesetSilently = function (changeset) {\n\t\tthis.stopWatching();\n\t\tthis.applyChangeset(changeset);\n\t\tthis.startWatching();\n\t};\n\n\t/**\n\t * Applies the given changeset to the wrapped object. Note that this\n\t * method fires a {@link SyncedObject#event:changed changed} event if any \n\t * attribute does change. If you don't want to receive this event, use \n\t * {@link SyncedObject#applyChangesetSilently applyChangesetSilently} \n\t * instead.\n\t * @fires  SyncedObject#changed\n\t * @param  {SyncedObject.Changeset} changeset  changes that should be\n\t *  applied to the wrapped object\n\t * @memberOf SyncedObject\n\t */\n\tSyncedObject.prototype.applyChangeset = function (changeset) {\n\t\tvar propertyName;\n\t\tif (changeset.hasOwnProperty('changed')) {\n\t\t\tfor (propertyName in changeset.changed) {\n\t\t\t\tthis._data[propertyName] = changeset.changed[propertyName];\n\t\t\t}\n\t\t}\n\t\tif (changeset.hasOwnProperty('removed')) {\n\t\t\tfor (var i in changeset.removed) {\n\t\t\t\tpropertyName = changeset.removed[i];\n\t\t\t\tdelete this._data[propertyName];\n\t\t\t}\n\t\t}\n\t};\n\n\t/** \n\t * @param {string} property  property that has been changed\n\t * @param {string} action    what has been done to the property\n\t * @param          newValue  new value of the changed property\n\t * @param          oldValue  old value of the changed property\n\t * @see                      https://github.com/melanke/Watch.JS\n\t * @private\n\t */\n\tSyncedObject.prototype.onAttributesChange = function (property, action, newValue, oldValue) {\n\t\tvar changed = {};\n\t\tvar removed = [];\n\n\t\tif (property === 'root' && action === 'differentattr') {\n\t\t\t// some attributes have been added or deleted\n\t\t\tfor (var i in newValue.added) {\n\t\t\t\tvar propertyName = newValue.added[i];\n\t\t\t\tchanged[propertyName] = this._data[propertyName];\n\t\t\t}\n\t\t\tfor (var j in newValue.removed) {\n\t\t\t\tremoved.push(newValue.removed[j]);\n\t\t\t}\n\t\t} else if (action === 'set' &&\n\t\t\t\tJSON.stringify(oldValue) !== JSON.stringify(newValue)) {\n\t\t\t// one attribute has changed\n\t\t\tchanged[property] = newValue;\n\t\t}\n\n\t\tvar changeset = {};\n\t\tif (Object.keys(changed).length > 0) {\n\t\t\tchangeset.changed = changed;\n\t\t}\n\t\tif (Object.keys(removed).length > 0) {\n\t\t\tchangeset.removed = removed;\n\t\t}\n\n\t\tthis.emit('changed', changeset);\n\t};\n\n\t/**\n\t * Get the value of a specific attribute from the synced object. If the value\n\t * is not present yet, it will be passed to the returned promise later on.\n\t * This should make handling async code a bit easier.\n\t * @param  {string} name       name of the attribute whose value you want to \n\t *  know\n\t * @param  {integer} [timeout=3000] time in milliseconds after which the returned\n\t *  promise will be rejected, if the attribute is not present\n\t * @return {external:Promise} On success the promise will be resolved with \n\t * the value of the requested attribute. Has the attribute not been available \n\t * after the given timout, the promise will be rejected with a generic\n\t * error.\n\t * @memberOf SyncedObject\n\t *\n\t * @example\n\t * var sync = new SyncedObject();\n\t * sync.startWatching();\n\t * sync.get('foo').then(function (value) {\n\t *   console.log(value); // will be 'bar'\n\t * });\n\t * sync.get('na').fail(function (error) {\n\t *   // when 'na' has never been set\n\t *   console.log(error);\n\t * });\n\t * sync.data.foo = 'bar';\n\t * \n\t */\n\tSyncedObject.prototype.get = function (name, timeout) {\n\t\tvar deferred = Q.defer();\n\t\tvar syncedObject = this;\n\n\t\tif (this._data.hasOwnProperty(name)) {\n\t\t\tdeferred.resolve(this._data[name]);\n\t\t} else {\n\t\t\tvar onChanged = function (changeset) {\n\t\t\t\tif (syncedObject._data.hasOwnProperty(name)) {\n\t\t\t\t\tsyncedObject.removeListener('changed', onChanged);\n\t\t\t\t\tdeferred.resolve(syncedObject._data[name]);\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.on('changed', onChanged);\n\t\t}\n\n\t\treturn deferred.promise.timeout(timeout || 3000);\n\t};\n\n\t/**\n\t * Fired when any top level attribute of the wrapped object has changed.\n\t * @event SyncedObject#changed\n\t * @property {SyncedObject.Changeset} changeset  what has changed exactly?\n\t */\n\n\texports = SyncedObject;\n\treturn exports;\n\n});",
    "\n/* \n* To use this with require.js AND the node.js module system (on server and client side).\n* see https://github.com/jrburke/amdefine\n*/\nif (typeof define !== 'function') { var define = require('amdefine')(module); }\n\n\ndefine('../shared/CustomMessageSender',['require','exports','module'],function(require, exports, module) {\n\t'use strict';\n\n\t/**\n\t * @classdesc Util class for all objects that allow to send custom messages\n\t *  (e.g. player.message('foo', {data: 'bar'})).\n\t * @param {module:server/messages~MessageBus|module:client/messages~MessageBus} \n\t *  messageBus message bus instance used for sending the messages\n\t * @param {string} instance   instance identifier that should be used for\n\t *  the 'fromInstance' attribute of outgoing messages\n\t * @private\n\t */\n\tvar CustomMessageSender = function (messageBus, instance) {\n\t\tthis.messageBus = messageBus;\n\t\tthis.instance = instance;\n\t};\n\n\t/**\n\t * Sends a custom message over the message bus.\n\t * @param  {string} type     name of the custom message\n\t * @param  {*}      [data]   any data to transport\n\t * @param  {module:client/multi~toClient|module:server/multi~toClient} \n\t *  [toClient='all'] which client should receive the message\n\t * @param  {boolean} [volatile=false] if true, the message may be dropped\n\t *  by the framework\n\t */\n\tCustomMessageSender.prototype.message = function (type, data, toClient, volatile) {\n\t\tvar message = {\n\t\t\tname: 'message',\n\t\t\tfromInstance: this.instance,\n\t\t\ttype: type,\n\t\t\tdata: data\n\t\t};\n\n\t\tmessage.toClient = toClient || 'all';\n\t\tif (typeof message.toClient === 'object') {\n\t\t\tif (message.toClient instanceof Array) {\n\t\t\t\tfor (var i in message.toClient) {\n\t\t\t\t\tmessage.toClient[i] = message.toClient[i].id;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmessage.toClient = [ message.toClient.id ];\n\t\t\t}\n\t\t}\n\n\t\tif (volatile === true) {\n\t\t\tmessage.volatile = true;\n\t\t}\n\n\t\tthis.messageBus.send(message);\n\t};\n\n\t\n\texports = CustomMessageSender;\n\treturn exports;\n\n});",
    "\n/* \n* To use this with require.js AND the node.js module system (on server and client side).\n* see https://github.com/jrburke/amdefine\n*/\nif (typeof define !== 'function') { var define = require('amdefine')(module); }\n\n\n/**\n * @module shared/player\n * @private\n */\ndefine('../shared/player',['require','exports','module','./SyncedObject','./CustomMessageSender','events','util'],function(require, exports, module) {\n\t'use strict';\n\n\tvar SyncedObject = require('./SyncedObject');\n\tvar MessageSender = require('./CustomMessageSender');\n\tvar EventEmitter = require('events').EventEmitter;\n\tvar util = require('util');\n\n\t/**\n\t * @classdesc This player class represents a device connected\n\t * to a session. Every player will be mirrored to the server and\n\t * all connected devices. This class can be used the same way on\n\t * server and client side.\n\t *\n\t * @mixes external:EventEmitter\n\t * @fires module:shared/player~Player#attributesChanged\n\t * @fires module:shared/player~Player#disconnected\n\t * @memberof module:shared/player\n\t * @class\n\t * @inner\n\t * @protected\n\t *\n\t * @param {string} id  unique identifier of this player\n\t * @param {module:client/messages~MessageBus|module:server/messages~MessageBus} \n\t *  messageBus  message bus instance this player should use to communicate\n\t */\n\tvar Player = function (id, messageBus) {\n\n\t\tEventEmitter.call(this);\n\n\t\t// PUBLIC\n\n\t\t/** \n\t\t * unique id for this player\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.id = id;\n\t\t/**\n\t\t * Unique player-number inside this session beginning with 0.\n\t\t * Free numbers from disconnected players will be reused to\n\t\t * avoid gaps.\n\t\t * @type {integer}\n\t\t * @readonly\n\t\t */\n\t\tthis.number = null;\n\t\t/**\n\t\t * pixel width of this clients screen\n\t\t * @type {integer}\n\t\t * @readonly\n\t\t */\n\t\tthis.width = null;\n\t\t/**\n\t\t * pixel height of this clients screen\n\t\t * @type {integer}\n\t\t * @readonly\n\t\t */\n\t\tthis.height = null;\n\n\n\t\t// PROTECTED\n\n\t\tthis.messageBus = messageBus;\n\t\tthis.messageSender = new MessageSender(messageBus, id);\n\t\t/**\n\t\t * wrapper for this players attributes\n\t\t * @type {SyncedObject}\n\t\t * @private\n\t\t */\n\t\tthis.syncedAttributes = new SyncedObject();\n\n\n\t\t// LISTENERS\n\t\n\t\tthis.messageToken = this.messageBus.register('message',\n\t\t\tthis.id, this.onMessage.bind(this));\n\n\t\tthis.attributesChangedToken = this.messageBus.register('attributesChanged',\n\t\t\tthis.id, this.onAttributesChangedRemotely.bind(this));\n\n\t\tthis.disconnectToken = this.messageBus.register('disconnect',\n\t\t\tthis.id, this.onDisconnect.bind(this));\n\n\t\tthis.userDisconnectToken = this.messageBus.register('user-disconnect',\n\t\t\tthis.id, this.onUserDisconnect.bind(this));\n\n\t\tthis.syncedAttributes.on('changed', this.onAttributesChangedLocally.bind(this));\n\t\tthis.syncedAttributes.startWatching();\n\t};\n\n\tutil.inherits(Player, EventEmitter);\n\n\t/** \n\t * Object with user attributes for this player.\n\t * All changes within this object will automatically\n\t * be synced to all other clients.<br>\n\t * Listen for changes by subscribing to the\n\t * {@link module:shared/player~Player#event:attributesChanged attributesChanged}\n\t * event.\n\t * @type {object}\n\t * @name attributes\n\t * @memberOf module:shared/player~Player\n\t * @instance\n\t */\n\tObject.defineProperty(Player.prototype, 'attributes', {\n\t\tget: function() {\n\t\t\treturn this.syncedAttributes.data;\n\t\t},\n\t\tset: function(val) {\n\t\t\tthis.syncedAttributes.data = val;\n\t\t}\n\t});\n\n\t/** \n\t * Called when the user attributes have been changed locally.\n\t * @param {SyncedObject.Changeset} changeset\n\t * @private\n\t */\n\tPlayer.prototype.onAttributesChangedLocally = function (changeset) {\n\t\tthis.messageBus.send({\n\t\t\tname: 'attributesChanged',\n\t\t\tfromInstance: this.id,\n\t\t\tchangeset: changeset\n\t\t});\n\t};\n\n\t/**\n\t * Some players attributes were changed remotely. \n\t * Apply the changes.\n\t * @abstract\n\t * @private\n\t */\n\tPlayer.prototype.onAttributesChangedRemotely = function (message) { };\n\n\t/**\n\t * Called when this socket receives a message for any player.\n\t * @private\n\t */\n\tPlayer.prototype.onMessage = function (message) {\n\t\tthis.emit(message.type, { type: message.type, data: message.data } );\n\t};\n\n\t/**\n\t * Handles disconnection by removing listeners, stopping attribute\n\t * syncing and emitting a disconnected event.\n\t * @private\n\t */\n\tPlayer.prototype.onDisconnect = function () {\n\t\t// I do not longer exist - inform...\n\t\tthis.emit('disconnected');\n\t\t// ... and remove listeners\n\t\tthis.removeAllListeners();\n\t\tthis.messageBus.unregister(this.messageToken);\n\t\tthis.messageBus.unregister(this.attributesChangedToken);\n\t\tthis.messageBus.unregister(this.userDisconnectToken);\n\t\tthis.messageBus.unregister(this.disconnectToken);\n\t\tthis.syncedAttributes.removeAllListeners();\n\t\tthis.syncedAttributes.stopWatching();\n\t};\n\n\t/**\n\t * Gets called when this player has been disconnected by the user\n\t * on any client or the server.\n\t * @private\n\t * @abstract\n\t */\n\tPlayer.prototype.onUserDisconnect = function (message) {};\n\n\t/**\n\t * Notifies the user about every change inside the given changeset.\n\t * @param  {SyncedObject.Changeset} changeset\n\t * @private\n\t */\n\tPlayer.prototype.emitAttributeChanges = function (changeset) {\n\t\tif (changeset.hasOwnProperty('changed')) {\n\t\t\tfor (var i in changeset.changed) {\n\t\t\t\tthis.emit('attributeChanged/' + i, this.attributes[i]);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Get the value of a specific \n\t * {@link module:shared/player~Player#attributes attributes}\n\t * field. If the value is not present yet, it will be passed to the returned \n\t * promise later on. This should make handling async code a bit easier.<br>\n\t * This method is especially useful for attributes that are set just once\n\t * right after the player joined a session but need a bit of time to sync to \n\t * all clients, eg. player color, name, etc.\n\t * @param  {string} name       name of the attribute whose value you want to \n\t *  know\n\t * @param  {integer} [timeout=1000] time in milliseconds after which the \n\t *  returned promise will be rejected, if the attribute is not present\n\t * @return {external:Promise} On success the promise will be resolved with \n\t * the value of the requested attribute. Has the attribute not been available \n\t * after the given timout, the promise will be rejected with a generic\n\t * error.\n\t *\n\t * @example\n\t * session.on('playerJoined', function (event) {\n\t *   event.player.getAttributeAsync('foo').then(function (value) {\n\t *     console.log(value); // will be '#ff0000'\n\t *   });\n\t * });\n\t * \n\t * // on another client:\n\t * player.attributes.color = '#ff0000';\n\t * \n\t */\n\tPlayer.prototype.getAttributeAsync = function (name, timeout) {\n\t\treturn this.syncedAttributes.get(name, timeout);\n\t};\n\n\t/**\n\t * Sends the given message to all client instances of this player.\n\t * @example\n\t * // on any client\n\t * player.on('ping', function (event) {\n\t *   // outputs 'bar'\n\t *   console.log(event.data.foo);\n\t * });\n\t * // on server, instance of same player\n\t * player.message('ping', { foo: 'bar' });\n\t * @param {string} type    type of message that should be send\n\t * @param {object} [data]  message data that should be send\n\t * @param {module:server/multi~toClient|module:client/multi~toClient} \n\t *  [toClient='all']  which client should receive this message\n\t * @param {boolean} [volatile=false]  if true, the message may be dropped\n\t *  by the framework. Use this option for real time data where one dropped\n\t *  message does not interrupt your application.\n\t */\n\tPlayer.prototype.message = function (type, data, toClient, volatile) {\n\t\tthis.messageSender.message(type, data, toClient, volatile);\n\t};\n\n\t/**\n\t * Disconnect the client represented by this player from the framework.\n\t * Due to security reasons this will only work with the player that\n\t * represents this client (session.myself) and fail silently on all others.\n\t * @fires module:shared/player~Player#disconnected\n\t */\n\tPlayer.prototype.disconnect = function () {\n\t\tthis.messageBus.send({\n\t\t\tname: 'user-disconnect',\n\t\t\tfromInstance: this.id\n\t\t});\n\t};\n\n\t/**\n\t * Determines if this player is the first one inside its session (has player\n\t * number 0). Use this method to find out if this player has opened the \n\t * session or has joined later on.\n\t * @return {boolean} true if the player number is 0, false otherwise\n\t */\n\tPlayer.prototype.isFirst = function () {\n\t\treturn this.number === 0;\n\t};\n\n\t/**\n\t * Prepares this player for sending it via socket message\n\t * while avoiding circular dependencies.\n\t * @return {object} serialized player object (without socket)\n\t */\n\tPlayer.prototype.serialize = function () {\n\t\treturn {\n\t\t\tid: this.id,\n\t\t\tnumber: this.number,\n\t\t\tattributes: this.attributes,\n\t\t\twidth: this.width,\n\t\t\theight: this.height\n\t\t};\n\t};\n\t\n\t/**\n\t * Fired when the {@link module:shared/player~Player#attributes attributes} \n\t * of this player have been changed by any client or the server.\n\t * @event module:shared/player~Player#attributesChanged\n\t * @property {*}      value  new value of the changed attribute\n\t *\n\t * @example\n\t * player.on('attributeChanged/score', function (score) {\n\t *   console.log(score);\n\t * });\n\t *\n\t * // on another client or server\n\t * player.attributes.score++;\n\t */\n\n\t/**\n\t * Fired when this player disconnects from the server. Don't use this\n\t * instance any longer after this event has been fired.\n\t * @event module:shared/player~Player#disconnected\n\t */\n\n\n\t/**\n\t * Compare function to sort an array of players by \n\t * {@link module:shared/player~Player#number player numbers}.\n\t * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n\t */\n\texports.compare = function (p1, p2) {\n\t\treturn p1.number - p2.number;\n\t};\n\n\texports.Player = Player;\n\treturn exports;\n\n});",
    "\n/* \n* To use this with require.js AND the node.js module system (on server and client side).\n* see https://github.com/jrburke/amdefine\n*/\nif (typeof define !== 'function') { var define = require('amdefine')(module); }\n\n\n/**\n * @module shared/session\n * @private\n */\ndefine('../shared/session',['require','exports','module','events','util','./player'],function(require, exports, module) {\n\t'use strict';\n\n\tvar EventEmitter = require('events').EventEmitter;\n\tvar util = require('util');\n\tvar playerModule = require('./player');\n\n\n\t/**\n\t * @typedef {Object} SessionOptions\n\t * @property {string} [scriptName] name of server side script file that should\n\t *  be executed when a new session is created. This module must export a \n\t *  constructor that takes a session as its only argument (module.exports = \n\t *  function (session)). This property has to contain only numbers (0-9) and \n\t *  letters (A-Za-z) for security reasons. Multi will look for the given module\n\t *  name inside a 'games' directory that lies next to the multi directory.\n\t * @property {string} [token.func='numeric']  name of a function inside the \n\t *  {@link module:server/token} module that should generate the session token\n\t * @property {Array}  [token.args=[]]   argument array for the token \n\t *  generationfunction\n\t * @property {integer}[minPlayerNeeded=1] minimum number of players needed \n\t *  for this session\n\t * @property {integer}[maxPlayerAllowed=10] maximum number of players allowed \n\t *  for this session. Every addition player won't be allowed to join the session.\n\t * @property {Array.<string>}[filter] list of names of filter functions. \n\t *  The functions have to be defined in {@link module:server/filter} and will \n\t *  then be used to filter outgoing server-messages.\n\t */\n\n\n\t/**\n\t * @classdesc A game session that connects and manages multiple players.\n\t *\n\t * @mixes external:EventEmitter\n\t * @memberof module:shared/session\n\t * @class\n\t * @inner\n\t * @protected\n\t *\n\t * @see module:client/session~Session\n\t * @see module:server/session~Session\n\t *\n\t * @fires module:shared/session~Session#playerJoined\n\t * @fires module:shared/session~Session#playerLeft\n\t * @fires module:shared/session~Session#destroyed\n\t * @fires module:shared/session~Session#belowMinPlayerNeeded\n\t * @fires module:shared/session~Session#aboveMinPlayerNeeded\n\t */\n\tvar Session = function (messageBus) {\n\n\t\tEventEmitter.call(this);\n\n\t\t// PUBLIC\n\t\t/** \n\t\t * unique token identifying this session\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.token = null;\n\t\t/**\n\t\t * Dictionary of all players currently connected\n\t\t * to this session mapped on their ids.\n\t\t * @type {Object.<string, module:shared/player~Player>}\n\t\t * @readonly\n\t\t */\n\t\tthis.players = {};\n\t\t/**\n\t\t * @see SessionOptions\n\t\t * @readonly\n\t\t */\n\t\tthis.minPlayerNeeded = 1;\n\t\t/**\n\t\t * @see SessionOptions\n\t\t * @readonly\n\t\t */\n\t\tthis.maxPlayerAllowed = 10;\n\t\t/**\n\t\t * if false no more clients are allowed to join this session\n\t\t * @private\n\t\t */\n\t\tthis.playerJoiningEnabled = true;\n\n\n\t\t// PROTECTED\n\t\tthis.messageBus = null;\n\t\tthis.messageSender = null;\n\t};\n\n\tutil.inherits(Session, EventEmitter);\n\n\t/**\n\t * Child classes should call this method when they are finished building \n\t * and are ready to add listeners to themselves.\n\t * @protected\n\t */\n\tSession.prototype.onSessionReady = function () {\n\t\tvar session = this;\n\n\t\tthis.messageBus.register('message', 'session', function (message) {\n\t\t\tsession.emit(message.type,  { type: message.type, data: message.data });\n\t\t});\n\n\t\tthis.messageBus.register('changePlayerJoining', 'session', function (message) {\n\t\t\tsession.playerJoiningEnabled = message.playerJoiningEnabled;\n\t\t});\n\t};\n\n\t/**\n\t * Deconstructs this session when no longer needed and informs listening\n\t * objects.\n\t * @protected\n\t */\n\tSession.prototype.destroy = function () {\n\t\tthis.emit('destroyed');\n\t\tthis.messageBus.unregisterAll();\n\t\tthis.removeAllListeners();\n\t};\n\n\t/**\n\t * Adds the given player to this session. Override if needed.\n\t * @param player {module:shared/player~Player} player instance to add\n\t * @fires module:shared/session~Session#playerJoined\n\t * @protected\n\t */\n\tSession.prototype.addPlayer = function (player) {\n\t\tvar session = this;\n\n\t\t// add to collection\n\t\tthis.players[player.id] = player;\n\n\t\t// add listeners\n\t\tplayer.on('disconnected', function () {\n\t\t\tsession.removePlayer(player);\n\t\t});\n\n\t\t// inform others about this player\n\t\tsession.emit('playerJoined', { player: player });\n\t\tif (session.getPlayerCount() === session.minPlayerNeeded) {\n\t\t\tsession.emit('aboveMinPlayerNeeded');\n\t\t}\n\t\tif (session.getPlayerCount() === session.maxPlayerAllowed) {\n\t\t\tsession.emit('aboveMaxPlayerNeeded');\n\t\t}\n\t};\n\n\t/**\n\t * Removes the given player from this session. Override if needed.\n\t * @param player {module:shared/player~Player} player instance to remove\n\t * @fires module:shared/session~Session#playerRemoved\n\t * @protected\n\t */\n\tSession.prototype.removePlayer = function (player) {\n\t\tdelete this.players[player.id];\n\t\tthis.emit('playerLeft', { player: player });\n\n\t\tif (this.getPlayerCount() === (this.minPlayerNeeded-1)) {\n\t\t\tthis.emit('belowMinPlayerNeeded');\n\t\t}\n\t\tif (this.getPlayerCount() === (this.maxPlayerNeeded-1)) {\n\t\t\tthis.emit('belowMaxPlayerNeeded');\n\t\t}\n\t};\n\n\t/**\n\t * @returns {Array.<module:shared/player~Player>} an array of all \n\t * players currently connected to this session.\n\t * The array is sorted by \n\t * {@link module:shared/player~Player#number player numbers} \n\t * from small to high.\n\t */\n\tSession.prototype.getPlayerArray = function () {\n\t\tvar playerArray = [];\n\t\tfor(var i in this.players) {\n\t\t\tplayerArray.push(this.players[i]);\n\t\t}\n\t\treturn playerArray.sort(playerModule.compare);\n\t};\n\n\t/**\n\t * @return {integer} number of currently connected players including myself\n\t */\n\tSession.prototype.getPlayerCount = function () {\n\t\treturn Object.keys(this.players).length;\n\t};\n\n\t/**\n\t * @returns {module:shared/player~Player} the player with the\n\t * given {@link module:shared/player~Player#number player numbers} \n\t * (even if this is myself) or null if no player with this number \n\t * exists\n\t */\n\tSession.prototype.getPlayerByNumber = function (number) {\n\t\tvar players = this.getPlayerArray().filter(function (player) {\n\t\t\treturn player.number === number;\n\t\t});\n\t\treturn players[0] || null;\n\t};\n\n\t/**\n\t * @returns {module:shared/player~Player} the player with the\n\t * given {@link module:shared/player~Player#id id} \n\t * (even if this is myself) or null if no player with this id \n\t * exists\n\t */\n\tSession.prototype.getPlayerById = function (id) {\n\t\treturn this.players[id] || null;\n\t};\n\n\t/**\n\t * @return {boolean} true if there are as many ore more players \n\t * connected to this session as are allowed\n\t */\n\tSession.prototype.isFull = function () {\n\t\treturn this.getPlayerCount() >= this.maxPlayerAllowed;\n\t};\n\n\t/**\n\t * When you call this new players are not allowed to join this\n\t * session any more. Instead their promise will be rejected with a \n\t * {@link module:shared/errors.JoiningDisabledError JoiningDisabledError}.\n\t */\n\tSession.prototype.disablePlayerJoining = function () {\n\t\tthis.playerJoiningEnabled = false;\n\t\tthis.messageBus.send({\n\t\t\tname: 'changePlayerJoining',\n\t\t\tfromInstance: 'session',\n\t\t\tplayerJoiningEnabled: false\n\t\t});\n\t};\n\n\t/**\n\t * A call to this method will allow new players to join this session\n\t * again.\n\t */\n\tSession.prototype.enablePlayerJoining = function () {\n\t\tthis.playerJoiningEnabled = true;\n\t\tthis.messageBus.send({\n\t\t\tname: 'changePlayerJoining',\n\t\t\tfromInstance: 'session',\n\t\t\tplayerJoiningEnabled: true\n\t\t});\n\t};\n\n\t/**\n\t * Sends the given message to all other instances of this session.\n\t * @param {string} type    type of message that should be send\n\t * @param {object} [data]  message data that should be send\n\t * @param {module:client/multi~toClient|module:server/multi~toClient} \n\t *  [toClient='all']  which client should receive this message\n\t * @param {boolean} [volatile=false]  if true, the message may be dropped\n\t *  by the framework. Use this option for real time data where one dropped\n\t *  message does not interrupt your application.\n\t * @example\n\t * // on client no 1 or server\n\t * session.on('ping', function (event) {\n\t *   // outputs 'bar'\n\t *   console.log(event.data.foo);\n\t * });\n\t * // on client no 2 or server, instance of same session\n\t * session.message('ping', { foo: 'bar' });\n\t */\n\tSession.prototype.message = function (type, data, toClient, volatile) {\n\t\tthis.messageSender.message(type, data, toClient, volatile);\n\t};\n\n\t/**\n\t * Prepares this session and all its players for sending \n\t * it via socket message while avoiding circular dependencies.\n\t * @return {object} serialized session object including players\n\t */\n\tSession.prototype.serialize = function() {\n\t\tvar players = [];\n\t\tfor (var i in this.players) {\n\t\t\tplayers.push(this.players[i].serialize());\n\t\t}\n\t\treturn {\n\t\t\ttoken: this.token,\n\t\t\tplayers: players,\n\t\t\tminPlayerNeeded: this.minPlayerNeeded,\n\t\t\tmaxPlayerAllowed: this.maxPlayerAllowed\n\t\t};\n\t};\n\n\t/**\n\t * Fired when this session is no longer valid. <br>\n\t * The reason could be a broken connection or the\n\t * removal of your own player. <br><br>\n\t * Don't use this session any longer after the event \n\t * has been fired.\n\t * @event module:shared/session~Session#destroyed\n\t */\n\n\t/**\n\t * Fired when a new player has been added to this session.\n\t * From now on you can safely communicate with this player.\n\t * @event module:shared/session~Session#playerJoined\n\t * @property {module:shared/player~Player} player  The newly added player.\n\t * @example <caption>Adding connected players to the DOM</caption>\n\t * session.on('playerJoined', function (event) {\n\t *   var playerDiv = $('#player').clone();\n\t *   $('#players').append(playerDiv);\n\t *   event.player.on('disconnected', function () {\n\t *     playerDiv.remove();\n\t *   });\n\t * }\n\t */\n\n\t/**\n\t * Fired when a player has been removed from this session.\n\t * @event module:shared/session~Session#playerLeft\n\t * @property {module:shared/player~Player} player  The removed player.\n\t */\n\n\t/**\n\t * Fired when a player has been removed from this session and\n\t * there are now less player connected to this session than stated \n\t * in minPlayerNeeded.<br><br>\n\t * You could listen for this event to stop a running game when\n\t * the player count is getting to low.\n\t * @event module:shared/session~Session#belowMinPlayerNeeded\n\t */\n\n\t/**\n\t * Fired when a new player has been added to this session and\n\t * there are now exactly as many players connected to this session\n\t * as stated in minPlayerNeeded.<br><br>\n\t * You could listen for this event to start your game when\n\t * enough players have connected.\n\t * @event module:shared/session~Session#aboveMinPlayerNeeded\n\t */\n\n\t/**\n\t * Fired when a new player has been added to this session and\n\t * there are now exactly as many players connected to this session\n\t * as stated in maxPlayerAllowed.\n\t * @event module:shared/session~Session#aboveMaxPlayerAllowed\n\t */\n\n\t/**\n\t * Fired when a player has been removed from this session and\n\t * there are now less player connected to this session than stated \n\t * in maxPlayerNeeded.\n\t * @event module:shared/session~Session#belowMaxPlayerAllowed\n\t */\n\n\n\texports.Session = Session;\n\treturn exports;\n\n});",
    "\n/**\n * @module client/player\n * @private\n */\n \ndefine('player',['require','exports','module','../shared/player','util'],function(require, exports, module) {\n\t'use strict';\n\n\tvar AbstractPlayer = require('../shared/player').Player;\n\tvar util = require('util');\n\n\t/**\n\t * @classdesc Client side representation of a player object.\n\t * @mixes module:shared/player~Player\n\t * @inner\n\t * @class\n\t * @private\n\t * @memberof module:client/player\n\t * @param {string} id  unique identifier of this player\n\t * @param {module:client/messages~MessageBus} messageBus  message bus \n\t *  instance this player should use to communicate\n\t*/\n\tvar Player = function (id, messageBus) {\n\n\t\tAbstractPlayer.call(this, id, messageBus);\n\n\t};\n\n\tutil.inherits(Player, AbstractPlayer);\n\n\n\t/* override */\n\n\tPlayer.prototype.onAttributesChangedRemotely = function (message) {\n\t\tthis.syncedAttributes.applyChangesetSilently(message.changeset);\n\t\tthis.emitAttributeChanges(message.changeset);\n\t};\n\n\n\t/* exports */\n\n\t/**\n\t* Deserializes a player object send over a socket connection.\n\t* @returns {module:client/player~Player}\n\t*/\n\texports.deserialize = function (data, messageBus) {\n\t\tvar player = new Player(data.id, messageBus);\n\t\tfor (var i in data) {\n\t\t\tplayer[i] = data[i];\n\t\t}\n\t\treturn player;\n\t};\n\n\treturn exports;\n\n});",
    "\n/* \n* To use this with require.js AND the node.js module system (on server and client side).\n* see https://github.com/jrburke/amdefine\n*/\nif (typeof define !== 'function') { var define = require('amdefine')(module); }\n\n\ndefine('../shared/PubSub',['require','exports','module'],function(require, exports, module) {\n\t'use strict';\n\n\t/**\n\t * @classdesc A simple implementation of the content based\n\t * Publish/Suscribe-Pattern as described at\n\t * {@link http://msdn.microsoft.com/en-us/library/ff649664.aspx}.\n\t * @class PubSub\n\t * @private\n\t * @example\n\t * var pubSub = new PubSub();\n\t *\n\t * var myCallback = function (message) {\n\t *   // this will be called, for any message that\n\t *   // is approved by our filter function\n\t *   console.log(message);\n\t * };\n\t * \n\t * pubSub.subscribe(myCallback, function (message) {\n\t *   // filter function returning true or false\n\t *   return message.topic === 'test' && message.sender === 42;\n\t * });\n\t *\n\t * pubSub.publish({ topic: 'test', sender: 42 }); // myCallback is called\n\t * pubSub.publish({ topic: 'test', sender: 0 });  // myCallback is not called\n\t */\n\tvar PubSub = function () {\n\t\tthis.listeners = [];\n\t};\n\n\t/**\n\t * Adds a callback funtion that is called for any message published\n\t * to this pubSub-instance that is approved by the given filter function.\n\t * @param  {function} callback  this will be called for any published message\n\t *  that matches the filter function. The massage will be passed as argument.\n\t * @param  {function} filter    a filter function acception any message as\n\t *  argument and returning true, when the message should be accepted and\n\t *  false otherwise.\n\t * @return  a token that can be used to unsubscribe this callback-filter-combo\n\t * @memberOf PubSub\n\t */\n\tPubSub.prototype.subscribe = function (callback, filter) {\n\t\tif (typeof callback !== 'function' || typeof filter !== 'function') {\n\t\t\tthrow 'callback and filter have to be a function';\n\t\t}\n\t\tvar token = function (message) {\n\t\t\tif (filter(message)) {\n\t\t\t\tcallback(message);\n\t\t\t}\n\t\t};\n\t\tthis.listeners.push(token);\n\t\treturn token;\n\t};\n\n\t/**\n\t * Removes a callback-filter-combo so they don't receive published messages\n\t * any longer.\n\t * @param  token  the token to identify the subscription that should\n\t *  be removed - returned by the subscribe method\t\n\t * @memberOf PubSub\n\t * @example\n\t * var pubSub = new PubSub();\n\t *\n\t * // subscribe\n\t * var token = pubSub.subscribe(myCallback, function (message) {\n\t *   return message.receiver === 'xyz';\n\t * });\n\t * \n\t * // unsubscribe\n\t * pubSub.unsubscribe(token);\n\t */\n\tPubSub.prototype.unsubscribe = function (token) {\n\t\tvar index = this.listeners.indexOf(token);\n\t\tif (index !== -1) {\n\t\t\tthis.listeners.splice(index, 1);\n\t\t}\n\t};\n\n\t/**\n\t * Publishes a message in any format to all interested\n\t * subscribers.\n\t * @param  {*} message\n\t * @memberOf PubSub\n\t */\n\tPubSub.prototype.publish = function (message) {\n\t\tvar listeners = this.listeners;\n\t\tfor (var i in listeners) {\n\t\t\tlisteners[i](message);\n\t\t}\n\t};\n\n\t/**\n\t * Removes all subscriptions on this instance.\n\t * @memberOf PubSub\n\t */\n\tPubSub.prototype.unsubscribeAll = function () {\n\t\tthis.listeners = [];\n\t};\n\n\texports = PubSub;\n\treturn exports;\n\n});",
    "\n/**\n * @module client/messages\n * @private\n */\n \ndefine('messages',['require','exports','module','../shared/PubSub'],function(require, exports, module) {\n\t'use strict';\n\n\tvar PubSub = require('../shared/PubSub');\n\n\t/**\n\t * @classdesc Centralized communication infrastructure for one session.\n\t * Every session or player can send messages to the outside world\n\t * and subscribe to messages, using a custom filter.\n\t * @class\n\t * @param socket socket.io socket instance that connects the\n\t *  using session to the outside world\n\t * @private\n\t */\n\texports.MessageBus = function (socket) {\n\t\tvar messageBus = this;\n\n\t\tthis.socket = socket;\n\t\tthis.pubSub = new PubSub();\n\n\t\tsocket.on('disconnect', function () {\n\t\t\tmessageBus.onSocketMessage({\n\t\t\t\tname: 'disconnect',\n\t\t\t\tfromInstance: 'session'\n\t\t\t});\n\t\t});\n\t\tsocket.on('multi', function (data) {\n\t\t\tmessageBus.onSocketMessage(data);\n\t\t});\n\t};\n\n\t/**\n\t * The socket send a message - publish it to all subscribers.\n\t * @private\n\t */\n\texports.MessageBus.prototype.onSocketMessage = function (message) {\n\t\t// console.log(JSON.stringify(message));\n\t\tthis.pubSub.publish(message);\n\t};\n\n\t/**\n\t * Sends the given message to the server and the instances of the sender\n\t * (fromInstance) on all other clients (including the sending client) by \n\t * default. <br><br>\n\t * You can set message.toClient to: <br>\n\t * <ul>\n\t * <li>'all' - default behaviour </li>\n\t * <li>'all-but-myself' - message does not return to sending client (broadcast) </li>\n\t * <li>['id1', 'id2'] - message will be send to all clients whose IDs are \n\t * inside the array </li>\n\t * </ul>\n\t * Use this option to save bandwidth.<br><br>\n\t * Message that have set message.volatile=true may be dropped by the framework.\n\t * \n\t * @param  {object} message\n\t * @example\n\t * messageBus.send({\n\t *   name: 'myEvent',\n\t *   fromInstance: 'playerXYZ',\n\t *   toClient: 'all-but-myself',\n\t *   data1: 'mydata',\n\t *   data2: 42\n\t * });\n\t */\n\texports.MessageBus.prototype.send = function (message) {\n\t\tthis.socket.emit('multi', message);\n\t};\n\n\t/**\n\t * Register a callback for messages from the outside world.\n\t * @param  {string}   messageName  on which message name you would like to register?\n\t * @param  {string}   instance     messages from which instance do interest you?\n\t * @param  {Function} callback     function to call when a corresponding message\n\t *  is received (message name _and_ instance correspond to arguments)\n\t * @return {}                      token to unregister this callback again\n\t */\n\texports.MessageBus.prototype.register = function (messageName, instance, callback) {\n\t\treturn this.pubSub.subscribe(callback, function (message) {\n\t\t\treturn instance === message.fromInstance && messageName === message.name;\n\t\t});\n\t};\n\n\t/**\n\t * Unrigister a callback you registered earlier.\n\t * @param  {} token  register token returned by 'register' method\n\t * @example\n\t * // register\n\t * token = messageBus.register('myEventName', myId, callback);\n\t * // ... do something ...\n\t * // unregister again\n\t * messageBus.unregister(token);\n\t */\n\texports.MessageBus.prototype.unregister = function (token) {\n\t\tthis.pubSub.unsubscribe(token);\n\t};\n\n\t/**\n\t * Unregister all callbacks from this MessageBus instance.\n\t */\n\texports.MessageBus.prototype.unregisterAll = function () {\n\t\tthis.pubSub.unsubscribeAll();\n\t};\n\n\treturn exports;\n\n});",
    "\n/**\n * @module client/session\n * @private\n */\n\ndefine('session',['require','exports','module','../shared/session','util','./player','./messages','../shared/CustomMessageSender'],function(require, exports, module) {\n\t'use strict';\n\n\tvar AbstractSession = require('../shared/session').Session;\n\tvar util = require('util');\n\tvar playerModule = require('./player');\n\tvar MessageBus = require('./messages').MessageBus;\n\tvar MessageSender = require('../shared/CustomMessageSender');\n\n\n\t/**\n\t* @classdesc A game session that connects and manages multiple players on \n\t* the client side.\n\t* @inner\n\t* @class\n\t* @protected\n\t* @mixes module:shared/session~Session\n\t* @memberof module:client/session\n\t*\n\t* @param {module:client/player~Player} myself  the player instance that \n\t* represents my own client.\n\t* @param {} messageBus\n\t* @param {object} sessionData  data object from the server that\n\t* describes this session\n\t*/\n\tvar Session = function (myself, messageBus, sessionData) {\n\n\t\tAbstractSession.call(this);\n\n\t\t/**\n\t\t * The player instance that represents my own client.\n\t\t * @type {module:client/player~Player}\n\t\t * @readonly\n\t\t */\n\t\tthis.myself = myself;\n\t\tthis.players[myself.id] = myself;\n\n\t\tthis.messageBus = messageBus;\n\t\tthis.messageSender = new MessageSender(this.messageBus, 'session');\n\n\t\tthis.applySessionData(sessionData);\n\n\t\t/**\n\t\t * URL you have to visit in order to connect to this session.\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.joinSessionUrl = getJoinSesionUrl(this.token);\n\n\t\t// add messages listeners\n\t\tthis.onSessionReady();\n\t\tthis.messageBus.register('disconnect', 'session', this.destroy.bind(this));\n\t\tthis.messageBus.register('playerJoined', 'session', this.onPlayerJoined.bind(this));\n\t\twindow.addEventListener('unload', function () {\n\t\t\tmyself.disconnect();\n\t\t});\n\t};\n\n\tutil.inherits(Session, AbstractSession);\n\n\n\t/* private */\n\n\t/**\n\t * Deserializes the given sessionData onto this session.\n\t * @private\n\t */\n\tSession.prototype.applySessionData = function (sessionData) {\n\t\tvar seializedPlayers = sessionData.players;\n\t\tdelete sessionData.players;\n\n\t\t// deserialize session attributes\n\t\tfor (var i in sessionData) {\n\t\t\tthis[i] = sessionData[i];\n\t\t}\n\t\t// deserialize players\n\t\tfor (i in seializedPlayers) {\n\t\t\tthis.onPlayerJoined({ playerData: seializedPlayers[i] });\n\t\t}\n\t};\n\n\t/**\n\t * Creates a player from the given data and adds it to this session.\n\t * @private\n\t */\n\tSession.prototype.onPlayerJoined = function (message) {\n\t\tvar player = playerModule.deserialize(message.playerData, this.messageBus);\n\t\tthis.addPlayer(player);\n\t};\n\n\n\n\t/* module functions */\n\n\tfunction getJoinSesionUrl(token) {\n\t\tvar url = window.location.host;\n\t\tif (window.location.port !== '' && window.location.port !== '80') {\n\t\t\turl += ':' + window.location.port;\n\t\t}\n\t\turl += window.location.pathname + '#' + token;\n\t\treturn url;\n\t}\n\n\t/**\n\t* Deserializes a session object send over a socket connection.\n\t* @returns {module:client/session~Session}\n\t*/\n\texports.deserialize = function (data, socket) {\n\t\tvar messageBus = new MessageBus(socket);\n\t\tvar myself = playerModule.deserialize(data.player, messageBus);\n\t\tvar session = new Session(myself, messageBus, data.session);\n\t\treturn session;\n\t};\n\n\treturn exports;\n\n});",
    "\n/* \n* To use this with require.js AND the node.js module system (on server and client side).\n* see https://github.com/jrburke/amdefine\n*/\nif (typeof define !== 'function') { var define = require('amdefine')(module); }\n\n\n/**\n * Here you can find some useful functions for working with colors.\n * This is not multis core functionality but might be convenient to use.\n * @module\n */\ndefine('../shared/color',['require','exports','module'],function(require, exports, module) {\n\t'use strict';\n\n\t/**\n\t * @returns {string} a random color string using the format '#RRGGBB'\n\t */\n\texports.random = function () {\n\t\tvar color = 'ffff' + (Math.random()*0xFFFFFF<<0).toString(16);\n\t\tcolor = '#' + color.slice(-6);\n\t\treturn color;\n\t};\n\n\treturn exports;\n\n});",
    "\n/* \n* To use this with require.js AND the node.js module system (on server and client side).\n* see https://github.com/jrburke/amdefine\n*/\nif (typeof define !== 'function') { var define = require('amdefine')(module); }\n\n\n/**\n * Collection of Error classes that multi uses to communicate that\n * something went wrong.\n * @private\n * @module shared/errors\n */\ndefine('../shared/errors',['require','exports','module','util'],function(require, exports, module) {\n\t'use strict';\n\n\tvar util = require('util');\n\n\t/**\n\t * The built in error object.\n\t * @external Error\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error}\n\t */\n\n\t/**\n\t * @classdesc Generic framewok error.\n\t * @class\n\t * @memberof module:shared/errors\n\t * @mixes external:Error\n\t */\n\tvar MultiError = exports.MultiError = function () {\n\t\tvar err = Error.apply(this, arguments);\n\t\tthis.stack = err.stack;\n\t\tthis.message = err.message;\n\t};\n\tutil.inherits(MultiError, Error);\n\n\t/**\n\t * @classdesc The session you were looking for was not found\n\t * on the server. Most likely the token has been misspelled.\n\t * @class\n\t * @mixes module:shared/errors.MultiError\n\t */\n\texports.NoSuchSessionError = function () {\n\t\tMultiError.call(this, 'the requested session does not exist');\n\t};\n\tutil.inherits(exports.NoSuchSessionError, MultiError);\n\n\n\t/**\n\t * @classdesc The session you wanted to create already exists.\n\t * This can happen when you have configured a static session \n\t * token inside the {@link SessionOptions} and are trying to \n\t * create this session more than once. Closing any open tabs\n\t * connected to this session may solve your problem.\n\t * @class\n\t * @mixes module:shared/errors.MultiError\n\t */\n\texports.TokenAlreadyExistsError = function () {\n\t\tMultiError.call(this, 'a session with this token does already exist');\n\t};\n\tutil.inherits(exports.TokenAlreadyExistsError, MultiError);\n\n\n\t/**\n\t * @classdesc The session you wanted to join already has enough\n\t * players. This happens when there are as many or more players \n\t * connected as defined in \n\t * {@link module:client/session~Session#maxPlayerAllowed maxPlayerAllowed}.\n\t * @class\n\t * @mixes module:shared/errors.MultiError\n\t */\n\texports.SessionFullError = function () {\n\t\tMultiError.call('the requested session is full');\n\t};\n\tutil.inherits(exports.SessionFullError, MultiError);\n\n\n\t/**\n\t * @classdesc You are not able to create or join a session\n\t * because there is no connection to the server. Maybe the\n\t * socket.io settings are wrong or the internet connection\n\t * dropped.\n\t * @class\n\t * @mixes module:shared/errors.MultiError\n\t */\n\texports.NoConnectionError = function () {\n\t\tMultiError.call(this, 'no connection to server');\n\t};\n\tutil.inherits(exports.NoConnectionError, MultiError);\n\n\n\t/**\n\t * @classdesc There could be no valid session token extracted\n\t * from the url. You may want to check if the current url has\n\t * the format http://myGameUrl/some/game#myToken\n\t * @class\n\t * @mixes module:shared/errors.MultiError\n\t */\n\texports.NoSessionTokenFoundError = function () {\n\t\tMultiError.call(this, 'no session token found in url');\n\t};\n\tutil.inherits(exports.NoSessionTokenFoundError, MultiError);\n\n\n\t/**\n\t * @classdesc New players are currently not allowed to join\n\t * this session. Maybe someone called \n\t * {@link module:client/session~Session#disablePlayerJoining}.\n\t * @class\n\t * @mixes module:shared/errors.MultiError\n\t */\n\texports.JoiningDisabledError = function () {\n\t\tMultiError.call(this, 'player joining is currently disabled');\n\t};\n\tutil.inherits(exports.JoiningDisabledError, MultiError);\n\n\n\t/**\n\t * @classdesc The script name you configured in the {@link SessionOptions}\n\t *  is not valid.\n\t * @class\n\t * @mixes module:shared/errors.MultiError\n\t */\n\texports.ScriptNameNotAllowedError = function () {\n\t\tMultiError.call(this, 'only letters (A-Za-z) and digits (0-9) are allowed for sessionOptions.scriptName');\n\t};\n\tutil.inherits(exports.ScriptNameNotAllowedError, MultiError);\n\n\n\treturn exports;\n\n});",
    "\n/**\n* Util functions and classes to make working with session tokens a bit\n* easier.\n* @module client/token\n*/\n\ndefine('token',['require','exports','module','../lib/q','../shared/errors'],function(require, exports, module) {\n\t'use strict';\n\n\tvar Q = require('../lib/q');\n\tvar errors = require('../shared/errors');\n\n\t/**\n\t * Extracts the session token from the current URL. At the moment it has to \n\t * follow the format \"http://path.to/my/server#myToken\".\n\t * @return {external:Promise} On success the promise will be resolved with \n\t * the parsed session token. On error it will be rejected with a \n\t * {@link module:shared/errors.NoSuchSessionError NoSuchSessionError}.\n\t * @see module:client/multi~Multi#autoJoinSession\n\t */\n\texports.extractTokenFromURL = function () {\n\t\tvar sessionToken = window.location.hash.substring(1);\n\n\t\tif (sessionToken === undefined || sessionToken === '') {\n\t\t\treturn Q.reject(new errors.NoSessionTokenFoundError());\n\t\t} else {\n\t\t\treturn Q.resolve(sessionToken);\n\t\t}\n\t};\n\n\n\t/**\n\t * Small helper class for managing symbol fields to connect to existing\n\t * sessions. The user can click on each symbol to toggle its state - all\n\t * activated symbols will then build the session token.<br>\n\t * -  -  #<br>\n\t * #  -  -<br>\n\t * -  -  #<br>\n\t * for example will convert to the token '238' - the indices of all activated\n\t * symbols.\n\t * @param {integer} symbolCount  number of symbols you want to have\n\t *  in your grid\n\t *  \n\t * @example\n\t * var symbols = SymbolArray(9);\n\t *\n\t * function onIconClick(event) {\n\t *   var icon = $(event.currentTarget);\n\t *   var isActive = symbolArray.toggle(icon.index());\n\t *   var classes = isActive ? 'active' : 'inactive';\n\t *   icon.attr('class', classes);\n\t * }\n\t *\n\t * // .... later on:\n\t * var token = symbols.toToken();\n\t * multi.joinSession(token);\n\t */\n\texports.SymbolArray = function (symbolCount) {\n\t\tthis.symbols = new Array(symbolCount);\n\t};\n\n\t/**\n\t * Toggles the selected state of the symbol at the given index.\n\t * @param  {integer} position index of the symbol you want to change\n\t * @return {boolean}         true if the symbol at the given index\n\t *  is now selected, false otherwise\n\t */\n\texports.SymbolArray.prototype.toggle = function (position) {\n\t\tthis.symbols[position] =! this.symbols[position];\n\t\treturn this.symbols[position];\n\t};\n\n\t/**\n\t * @return {string} the token representation of this symbol array\n\t */\n\texports.SymbolArray.prototype.toToken = function () {\n\t\treturn this.symbols.reduce(function (x, y, index) {\n\t\t\treturn y ? x + index : x;\n\t\t}, '');\n\t};\n\n});",
    "\n/* \n* To use this with require.js AND the node.js module system (on server and client side).\n* see https://github.com/jrburke/amdefine\n*/\nif (typeof define !== 'function') { var define = require('amdefine')(module); }\n\n/**\n * This module contains classes and utils that are useful\n * for working with multiple screens. To use a ScreenArranger inside your\n * game look up the \n * {@link module:plugins/screens.HorizontalArranger|HorizontalArranger}\n * documentation.\n * @module plugins/screens\n */\ndefine('../plugins/screens/index',['require','exports','module','events','util'],function(require, exports, module) {\n\t'use strict';\n\n\tvar EventEmitter = require('events').EventEmitter;\n\tvar util = require('util');\n\n\t/**\n\t * @classdesc When any ScreenArranger is used, an instance of this \n\t * class will be added to every player. Here you can find all\n\t * information and helper methods relevant for positioning one \n\t * screen on a bigger playing field.\n\t * @class\n\t * @param {module:shared/player~Player} \n\t *  player player instance this screen is added to\n\t */\n\texports.Screen = function (player) {\n\t\t/**\n\t\t * width of the screen in pixel\n\t\t * @type {integer}\n\t\t */\n\t\tthis.width = player.width;\n\t\t/**\n\t\t * height of the screen in pixel\n\t\t * @type {integer}\n\t\t */\n\t\tthis.height = player.height;\n\t\t/**\n\t\t * player instance this screen is added to\n\t\t * @type {module:shared/player~Player}\n\t\t */\n\t\tthis.player = player;\n\t\t/**\n\t\t * global x-position (from left) of this screen in pixel\n\t\t * @type {integer}\n\t\t */\n\t\tthis.x = null;\n\t\t/**\n\t\t * global x-position (from top) of this screen in pixel\n\t\t * @type {integer}\n\t\t */\n\t\tthis.y = null;\n\t\t/**\n\t\t * list of all player instances that border on the right\n\t\t * side of this screen\n\t\t * @type {Array}\n\t\t */\n\t\tthis.rightPlayers = [];\n\t\t/**\n\t\t * list of all player instances that border on the left\n\t\t * side of this screen\n\t\t * @type {Array}\n\t\t */\n\t\tthis.leftPlayers = [];\n\t\t/**\n\t\t * list of all player instances that border on the top\n\t\t * of this screen\n\t\t * @type {Array}\n\t\t */\n\t\tthis.topPlayers = [];\n\t\t/**\n\t\t * list of all player instances that border on the bottom\n\t\t * of this screen\n\t\t * @type {Array}\n\t\t */\n\t\tthis.bottomPlayers = [];\n\t};\n\n\t/**\n\t * @param  {integer}  x  global x position in pixel\n\t * @param  {integer}  y  global y position in pixel\n\t * @return {boolean}  true if the given global coordinates lie inside \n\t * the this screen object, else false\n\t * @private\n\t */\n\texports.Screen.prototype.isHit = function (x, y) {\n\t\treturn x >= this.x &&\n\t\t\tx < this.x + this.width &&\n\t\t\ty >= this.y &&\n\t\t\ty < this.y + this.height;\n\t};\n\n\t/**\n\t * @param  {integer}  x      global x-coordinate of the upper left corner\n\t *  of the rectangle in pixel\n\t * @param  {integer}  y      global y-coordinate of the upper left corner\n\t *  of the rectangle in pixel\n\t * @param  {integer}  width  width of the rectangle in pixel\n\t * @param  {integer}  height height of the rectangle in pixel\n\t * @return {boolean}         true if the given rectangle or parts of it \n\t *  overlap with this screen\n\t */\n\texports.Screen.prototype.isHitByRect = function (x, y, width, height) {\n\t\treturn x + width >= this.x &&\n\t\t\ty + height >= this.y &&\n\t\t\tx < this.x + this.width &&\n\t\t\ty < this.y + this.height;\n\t};\n\n\t/**\n\t * Converts local pixel coordinates to global ones, using this screen\n\t * as local coordinate system.\n\t * @param  {integer} x  local x position in pixel\n\t * @param  {integer} y  local y position in pixel\n\t * @return {object}  { x: globalX, y: globalY }\n\t */\n\texports.Screen.prototype.localToGlobal = function (x, y) {\n\t\treturn { x: this.x + x, y: this.y + y };\n\t};\n\n\t/**\n\t * Converts global pixel coordinates to local ones, using this screen\n\t * as local coordinate system.\n\t * @param  {integer} x  global x position in pixel\n\t * @param  {integer} y  global y position in pixel\n\t * @return {object}  { x: localX, y: localY, player: this.player }\n\t */\n\texports.Screen.prototype.globalToLocal = function (x, y) {\n\t\treturn { x: x - this.x, y: y - this.y, player: this.player };\n\t};\n\n\n\t/**\n\t * @classdesc This is the base class for arranging players of the given\n\t * session to one big playing field. It will add a \n\t * {@link module:plugins/screens.Screen|screen} attribute to every joined \n\t * player.<br><br>\n\t * Feel free to extend this class to create your own ScreenArranger. You\n\t * can use {@link module:plugins/screens.HorizontalArranger} \n\t * as example implementation.\n\t * @class\n\t * @mixes external:EventEmitter\n\t * @param {module:shared/session~Session}\n\t *  Session that contains the players that should be arranged into\n\t *  one big screen.\n\t */\n\texports.ScreenArranger = function (session) {\n\n\t\tEventEmitter.call(this);\n\n\t\t/**\n\t\t * Session that is getting arranged into one big game screen\n\t\t * @type {module:shared/session~Session}\n\t\t * @readonly\n\t\t */\n\t\tthis.session = session;\n\t\t/**\n\t\t * total width of the big screen in pixel\n\t\t * @type {integer}\n\t\t * @readonly\n\t\t */\n\t\tthis.width = 0;\n\t\t/**\n\t\t * total height of the big screen in pixel\n\t\t * @type {integer}\n\t\t * @readonly\n\t\t */\n\t\tthis.height = 0;\n\n\t\t// add a screen to every player...\n\t\tsession.getPlayerArray().forEach(function (player) {\n\t\t\tplayer.screen = new exports.Screen(player);\n\t\t});\n\t\tthis.refresh();\n\n\t\t// ...and every player that will come\n\t\tsession.on('playerJoined', this.onPlayerJoined.bind(this));\n\t\tsession.on('playerLeft', this.onPlayerLeft.bind(this));\n\t};\n\n\tutil.inherits(exports.ScreenArranger, EventEmitter);\n\n\t/**\n\t * Converts local pixel coordinates to global ones.\n\t * @param  {module:shared/player~Player} player \n\t *  player instance the local coordinates refer to\n\t * @param  {integer} x  local x position in pixel\n\t * @param  {integer} y  local y position in pixel\n\t * @return {object}  { x: globalX, y: globalY } or null if the given\n\t *  player is no part of this arranger\n\t */\n\texports.ScreenArranger.prototype.localToGlobal = function (player, x, y) {\n\t\treturn player.screen.localToGlobal(x, y);\n\t};\n\n\t/**\n\t * Determines which Player overlaps with the given rectangle.\n\t * @param  {integer}  x      global x-coordinate of the upper left corner\n\t *  of the rectangle in pixel\n\t * @param  {integer}  y      global y-coordinate of the upper left corner\n\t *  of the rectangle in pixel\n\t * @param  {integer}  width  width of the rectangle in pixel\n\t * @param  {integer}  height height of the rectangle in pixel\n\t * @return {Array}    list of local objects of the form \n\t *  { x: localX, y: localY, player: hitPlayer }. X and y are the upper-left\n\t *  corner of the given rectangle in the players local coordinate system.\n\t * @see module:plugins/screens.Screen#globalToLocal\n\t * @see module:plugins/screens.Screen#isHitByRect\n\t */\n\texports.ScreenArranger.prototype.globalRectToLocals = function (x, y, width, height) {\n\t\tvar locals = {};\n\t\tvar screen;\n\t\tfor (var i in this.session.players) {\n\t\t\tscreen = this.session.players[i].screen;\n\t\t\tif (screen.isHitByRect(x, y, width, height)) {\n\t\t\t\tlocals[screen.player.id] = screen.globalToLocal(x, y);\n\t\t\t}\n\t\t}\n\n\t\treturn locals;\n\t};\n\n\t/**\n\t * Determines which Player overlaps with the given point and returns\n\t * it in his local coordinates.\n\t * @param  {integer}  x      global x-coordinate of in pixel\n\t * @param  {integer}  y      global y-coordinate of in pixel\n\t * @return {object|null}     local object of the form \n\t *  { x: localX, y: localY, player: hitPlayer } or null.\n\t * @see module:plugins/screens.Screen#globalToLocal\n\t */\n\texports.ScreenArranger.prototype.globalToLocal = function (x, y) {\n\t\tvar player = this.getPlayerAtCoords(x, y);\n\t\tif (player === null) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn player.screen.globalToLocal(x, y);\n\t\t}\n\t};\n\n\t/**\n\t * @param  {module:shared/player~Player} player \n\t *  any player object connected to the arranged session\n\t * @param  {integer}  x  global x position in pixel\n\t * @param  {integer}  y  global y position in pixel\n\t * @return {boolean}  true if the given coordinates lie within\n\t * the screen of the given player\n\t */\n\texports.ScreenArranger.prototype.isPlayerHit = function (player, x, y) {\n\t\treturn player.screen.isHit(x, y);\n\t};\n\n\t/*\n\t * @param  {integer}  x  global x position in pixel\n\t * @param  {integer}  y  global y position in pixel\n\t * @return {boolean}  true if the given coordinates lie within\n\t * the screen of any player, false otherwise\n\t */\n\texports.ScreenArranger.prototype.isAnyPlayerHit = function (x, y) {\n\t\treturn this.getPlayerAtCoords(x, y) !== null;\n\t};\n\n\t/**\n\t * @param  {integer}  x  global x position in pixel\n\t * @param  {integer}  y  global y position in pixel\n\t * @return {module:shared/player~Player}\n\t *  player object whose screen lies beneath the given coordinates\n\t *  or null when no player can be found at this position\n\t */\n\texports.ScreenArranger.prototype.getPlayerAtCoords = function (x, y) {\n\t\tfor (var i in this.session.players) {\n\t\t\tvar screen = this.session.players[i].screen;\n\t\t\tif (screen.isHit(x, y)) {\n\t\t\t\treturn screen.player;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t};\n\n\t/**\n\t * This method by default gets called whenever a new player joins\n\t * the underlying session. It calls\n\t * {@link module:plugins/screens.ScreenArranger#arrange|arrange} and \n\t * {@link module:plugins/screens.ScreenArranger#recaculateDimentions|recaculateDimentions}. <br>\n\t * You can override this method to write your own screen arranger.\n\t * In this case please make sure to arrange every player and \n\t * update the dimentions of the whole playing field accordingly.\n\t */\n\texports.ScreenArranger.prototype.refresh = function () {\n\t\tthis.arrange();\n\t\tthis.recaculateDimentions();\n\t\tthis.emit('arrangementChanged');\n\t};\n\n\t/**\n\t * This method is called by the \n\t * {@link module:plugins/screens.ScreenArranger#refresh|refresh} \n\t * method by default. It takes the global position and dimentions of every \n\t * player into account to update the global playing field width and height \n\t * accordingly.<br>\n\t * You may override this method or call it from any overridden method.\n\t */\n\texports.ScreenArranger.prototype.recaculateDimentions = function () {\n\t\tvar maxX = 0;\n\t\tvar maxY = 0;\n\t\tthis.session.getPlayerArray().forEach(function (player) {\n\t\t\tmaxX = Math.max(maxX, player.screen.x + player.screen.width);\n\t\t\tmaxY = Math.max(maxY, player.screen.y + player.screen.height);\n\t\t});\n\t\tthis.width = maxX;\n\t\tthis.height = maxY;\n\t};\n\n\t/**\n\t * This method is called by the \n\t * {@link module:plugins/screens.ScreenArranger#refresh|refresh} method by default. \n\t * It does  nothing for this base class and should be overridden by every \n\t * child class.<br><br>\n\t * Please make sure to update the positions of every players screen here.\n\t * @abstract\n\t */\n\texports.ScreenArranger.prototype.arrange = function () {\n\t\t// this does nothing!\n\t};\n\n\t/**\n\t * This method is callen whenever a new player joins the session.\n\t * Feel free to override. In this case you may want to create a new\n\t * screen for the player and call your refresh method.\n\t * @param event\n\t */\n\texports.ScreenArranger.prototype.onPlayerJoined = function (event) {\n\t\tevent.player.screen = new exports.Screen(event.player);\n\t\tthis.refresh();\n\t};\n\n\t/**\n\t * This method is callen whenever a new player leaves the session.\n\t * Feel free to override. In this case you may want to call your \n\t * refresh method.\n\t * @param event\n\t */\n\texports.ScreenArranger.prototype.onPlayerLeft = function (event) {\n\t\tthis.refresh();\n\t};\n\n\t/**\n\t * Fired when the screen layout changes. This may be because a player\n\t * joined or left the session.\n\t * @event module:plugins/screens.ScreenArranger#arrangementChanged\n\t */\n\n\treturn exports;\n\n});",
    "\n/* \n* To use this with require.js AND the node.js module system (on server and client side).\n* see https://github.com/jrburke/amdefine\n*/\nif (typeof define !== 'function') { var define = require('amdefine')(module); }\n\n\ndefine('../plugins/screens/HorizontalArranger',['require','exports','module','util','./index'],function(require, exports, module) {\n\t'use strict';\n\n\tvar util = require('util');\n\tvar screensModule = require('./index');\n\tvar ScreenArranger = screensModule.ScreenArranger;\n\n\t/**\n\t * @classdesc This class arranges the screens of the every player \n\t * horizontally. Player with lower playerNumbers will be farer left.\n\t * @example\n\t * --------    ------------\n\t * |      |----|          |\n\t * |  p1  | p2 |    p3    |\n\t * |      |----|          |\n\t * --------    ------------\n\t * @example\n\t * var arranger = new multiModule.screens.HorizontalArranger(session);\n\t * var firstPlayer = session.getPlayerByNumber(0);\n\t * console.log(firstPlayer.screen.x);\n\t * console.log(firstPlayer.screen.y);\n\t * console.log(firstPlayer.screen.width);\n\t * console.log(firstPlayer.screen.height);\n\t * @class\n\t * @mixes module:plugins/screens.ScreenArranger\n\t * @memberOf module:plugins/screens\n\t * @param {module:shared/session~Session} \n\t *  session session instance whose player you want to be arranged.\n\t */\n\tvar HorizontalArranger = function (session) {\n\t\tScreenArranger.call(this, session);\n\t};\n\tutil.inherits(HorizontalArranger, ScreenArranger);\n\n\tHorizontalArranger.prototype.arrange = function () {\n\t\tvar height = 0;\n\t\tvar xPos = 0;\n\t\tvar yPos;\n\t\tvar lastPlayer = null;\n\t\tvar players = this.session.getPlayerArray();\n\t\tplayers.forEach(function (player) {\n\t\t\theight = Math.max(height, player.height);\n\t\t\tplayer.screen.leftPlayers = [];\n\t\t\tplayer.screen.rightPlayers = [];\n\t\t});\n\t\tplayers.forEach(function (player) {\n\t\t\tyPos = Math.round((height - player.height) / 2);\n\t\t\tplayer.screen.x = xPos;\n\t\t\tplayer.screen.y = yPos;\n\t\t\tif (lastPlayer !== null) {\n\t\t\t\tplayer.screen.leftPlayers = [ lastPlayer ];\n\t\t\t\tlastPlayer.screen.rightPlayers = [ player ];\n\t\t\t}\n\t\t\txPos += player.width;\n\t\t\tlastPlayer = player;\n\t\t});\n\n\t\tthis.width = xPos;\n\t\tthis.height = height;\n\t};\n\n\t// this is already done inside arrange\n\tHorizontalArranger.prototype.recaculateDimentions = function () {};\n\n\tscreensModule.HorizontalArranger = HorizontalArranger;\n\texports = HorizontalArranger;\n\treturn exports;\n\n});",
    "\n/**\n* Entry point for the client side multi library for developing\n* multiscreen games.\n* @module client/multi\n* @example\n* // configure where multi can find your client side socket.io lib\nrequirejs.config({\n  paths: {\n    'socket.io': '/socket.io/socket.io.js'\n  }\n});\n\nvar multiOptions = {\n  server: 'http://mySocketioServer/'\n};\n\n// init and try to create the session\nvar multi = multiModule.init(multiOptions);\nmulti.createSession().then(onSession, onSessionFailed).done();\n*/\n\n\n\ndefine('multi',['require','exports','module','events','util','./session','../shared/color','../shared/errors','./token','../plugins/screens/index','../plugins/screens/HorizontalArranger','../lib/q','socket.io'],function(require, exports, module) {\n\t'use strict';\n\n\tvar EventEmitter = require('events').EventEmitter;\n\tvar util = require('util');\n\tvar sessionModule = require('./session');\n\tvar color = require('../shared/color');\n\tvar errors = require('../shared/errors');\n\tvar token = require('./token');\n\tvar screensModule = require('../plugins/screens/index');\n\tvar HorizontalArranger = require('../plugins/screens/HorizontalArranger');\n\tvar Q = require('../lib/q');\n\tvar io = require('socket.io');\n\n\tQ.stopUnhandledRejectionTracking();\n\n\tvar instance = null;\n\n\n\t/**\n\t* @typedef {Object} module:client/multi~MultiOptions\n\t* @property                   server    full url of a running socket.io server\n\t* @property {SessionOptions}  [session] default options for session creation\n\t*/\n\n\t/**\n\t * @typedef {(string|Array.<string>|module:client/player~Player)} module:client/multi~toClient\n\t * @description  Option to determine to which client a message should be send\n\t * (not to which _instance_ on this client).<br>\n\t * You can set it to:\n\t * <ul>\n\t * <li>'all' - the message will be send to all clients currently connected to\n\t * this session</li>\n\t * <li>'all-but-myself' - the message will be send to all clients currently \n\t * connected to this session except the sending client </li>\n\t * <li>'server' - the message will be send to the game server only</li>\n\t * <li>[player1, player2] - message will be send to all clients that are\n\t * represented by players inside this array</li>\n\t * <li>myPlayer - the message will be send to the client that is represented\n\t * by myPlayer</li>\n\t * </ul>\n\t */\n\n\t/**\n\t * A promise object provided by the q promise library.\n\t * @external Promise\n\t * @see {@link https://github.com/kriskowal/q/wiki/API-Reference}\n\t */\n\n\n\t/**\n\t* @classdesc Use this class to create new sessions or connect to \n\t* existing ones. You can get ready a to use instance of this class\n\t* by initializing the multi framework with \n\t* {@link module:client/multi.init multiModule.init(options)}.\n\t* @inner\n\t* @protected\n\t* @memberof module:client/multi\n\t* @class\n\t* @param {module:client/multi~MultiOptions} options to tweak this instances behaviour  \n\t*/\n\tvar Multi = function (options) {\n\t\tthis.server = options.server;\n\t\tthis.sessionOptions = options.session;\n\t};\n\n\t/**\n\t * Tries to connect to a session that does already exist on the server. \n\t * The session token will be extracted from the URL by using characters \n\t * after the url hash.<br>\n\t * As this operation is executed asynchrony a Q promise will be returned.\n\t *\n\t * @return {external:Promise} On success the promise will be resolved with \n\t * the joined {@link module:client/session~Session Session} instance.<br><br>\n\t * On error it will be rejected with either \n\t * {@link module:shared/errors.NoSuchSessionError NoSuchSessionError}, \n\t * {@link module:shared/errors.SessionFullError SessionFullError}, \n\t * {@link module:shared/errors.JoiningDisabledError JoiningDisabledError}, \n\t * {@link module:shared/errors.NoSessionTokenFoundError NoSessionTokenFoundError}, \n\t * or {@link module:shared/errors.NoConnectionError NoConnectionError}.\n\t */\n\tMulti.prototype.autoJoinSession = function () {\n\t\tvar multi = this;\n\t\treturn token.extractTokenFromURL().then(function (token) {\n\t\t\treturn multi.joinSession(token);\n\t\t});\n\t};\n\n\t/**\n\t * Tries to auto join an existing session.\n\t * When no valid session token can be extracted from the URL a\n\t * new session will be created instead.<br>\n\t * As this operation is executed asynchrony a Q promise will be returned.\n\t *\n\t * @return {external:Promise} On success the promise will be resolved with \n\t * the created or joined {@link module:client/session~Session Session} \n\t * instance.<br><br>\n\t * On error it will be rejected with either \n\t * {@link module:shared/errors.NoSuchSessionError NoSuchSessionError}, \n\t * {@link module:shared/errors.SessionFullError SessionFullError}, \n\t * {@link module:shared/errors.TokenAlreadyExistsError TokenAlreadyExistsError}, \n\t * {@link module:shared/errors.JoiningDisabledError JoiningDisabledError}, \n\t * or {@link module:shared/errors.NoConnectionError NoConnectionError}.\n\t */\n\tMulti.prototype.autoJoinOrCreateSession = function () {\n\t\tvar that = this;\n\n\t\treturn this.autoJoinSession().catch(function (error) {\n\t\t\tif (error instanceof errors.NoSessionTokenFoundError) {\n\t\t\t\treturn that.createSession();\n\t\t\t} else {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t});\n\t};\n\n\t/**\n\t * Opens a socket connection to the configured server.\n\t * @return {external:Promise} On success the promise will be resolved with\n\t *  the connected socket object. When the connection fails or another error\n\t *  (eg. a timeout) occurs, the promise will be rejected with a\n\t *  {@link module:shared/errors.NoConnectionError NoConnectionError}.\n\t * @private\n\t */\n\tMulti.prototype.openSocketConnection = function () {\n\t\tvar deferred = Q.defer();\n\t\tvar socket = io.connect(this.server, {\n\t\t\t\treconnect: false,\n\t\t\t\t'force new connection': true\n\t\t\t});\n\t\tsocket.on('connect', function () {\n\t\t\tdeferred.resolve(socket);\n\t\t});\n\n\t\tvar onError = function () {\n\t\t\tdeferred.reject(new errors.NoConnectionError());\n\t\t};\n\t\tsocket.on('connect_failed', onError);\n\t\tsocket.on('error', onError);\n\n\t\treturn deferred.promise;\n\t};\n\n\t/**\n\t * Tries to connect to a session that does already exist on the server. \n\t * As this operation is executed asynchrony a Q promise will be returned.\n\t * @param {string} sessionToken  unique token of the session you want\n\t * to join\n\t * @return {external:Promise} On success the promise will be resolved with \n\t * the joined {@link module:client/session~Session Session} instance.<br><br>\n\t * On error it will be rejected with either \n\t * {@link module:shared/errors.NoSuchSessionError NoSuchSessionError}, \n\t * {@link module:shared/errors.SessionFullError SessionFullError}, \n\t * {@link module:shared/errors.JoiningDisabledError JoiningDisabledError},\n\t * or {@link module:shared/errors.NoConnectionError NoConnectionError}.\n\t *\n\t * @example\n\t * var multiOptions = {\n\t *  server: 'http://mySocketioServer/'\n\t * };\n\t *\n\t * function onSession(session) {\n\t *  console.log('session joined', session.token);\n\t * }\n\t * function onSessionFailed(error) {\n\t *  console.log('session joining failed:', error.message);\n\t * }\n\t *\n\t * // init and join the session\n\t * var multi = multiModule.init(multiOptions);\n\t * multi.joinSession('123').then(onSession, onSessionFailed).done();\n\t */\n\tMulti.prototype.joinSession = function (sessionToken) {\n\t\tvar multi = this;\n\t\t\n\t\treturn this.openSocketConnection().then(function (socket) {\n\t\t\tvar deferred = Q.defer();\n\n\t\t\tsocket.on('sessionJoined', function (data) {\n\t\t\t\tvar session = sessionModule.deserialize(data, socket);\n\t\t\t\tdeferred.resolve(session);\n\t\t\t});\n\n\t\t\tsocket.on('joinSessionFailed', function (data) {\n\t\t\t\tvar error;\n\t\t\t\tif (data.reason === 'sessionNotFound') {\n\t\t\t\t\terror = new errors.NoSuchSessionError();\n\t\t\t\t} else if (data.reason === 'sessionFull') {\n\t\t\t\t\terror = new errors.SessionFullError();\n\t\t\t\t} else if (data.reason === 'joiningDisabled') {\n\t\t\t\t\terror = new errors.JoiningDisabledError();\n\t\t\t\t}\n\t\t\t\tdeferred.reject(error);\n\t\t\t});\n\n\t\t\tsocket.emit('joinSession', {\n\t\t\t\ttoken: sessionToken,\n\t\t\t\tplayerParams: multi.getPlayerParams()\n\t\t\t});\n\n\t\t\treturn deferred.promise;\n\t\t});\n\t};\n\n\t/**\n\t * Tries to create a new game session on the server. As this\n\t * operation is executed asynchrony a Q promise will be returned.\n\t * @param {SessionOptions} [options]  To tweak this new sessions behaviour.\n\t * If not provided, the session section of the multiOptions-object will\n\t * be used. If that does not exist either the default values will be used.\n\t *\n\t * @return {external:Promise} On success the promise will be resolved with the \n\t * created {@link module:client/session~Session Session} instance.<br><br>\n\t * On error it will be rejected with either \n\t * {@link module:shared/errors.TokenAlreadyExistsError TokenAlreadyExistsError},<br>\n\t * {@link module:shared/errors.ScriptNameNotAllowedError ScriptNameNotAllowedError},\n\t * or {@link module:shared/errors.NoConnectionError NoConnectionError}.\n\t *\n\t * @example\n\t * var multiOptions = {\n\t *  server: 'http://mySocketioServer/',\n\t *  session: {\n\t *    minPlayerNeeded: 3,\n\t *    maxPlayerAllowed: 5\n\t *  }\n\t * };\n\t *\n\t * function onSession(session) {\n\t *  console.log('session created', session.token);\n\t * }\n\t * function onSessionFailed(error) {\n\t *  console.log('session creation failed:', error.message);\n\t * }\n\t *\n\t * // init and try to create the session\n\t * var multi = multiModule.init(multiOptions);\n\t * multi.createSession().then(onSession, onSessionFailed).done();\n\t */\n\tMulti.prototype.createSession = function (options) {\n\t\tvar multi = this;\n\t\toptions = options || this.sessionOptions || {};\n\n\t\treturn this.openSocketConnection().then(function (socket) {\n\t\t\tvar deferred = Q.defer();\n\n\t\t\tsocket.on('sessionCreated', function (data) {\n\t\t\t\tvar session = sessionModule.deserialize(data, socket);\n\t\t\t\tdeferred.resolve(session);\n\t\t\t});\n\n\t\t\tsocket.on('createSessionFailed', function (event) {\n\t\t\t\tif (event.reason === 'tokenAlreadyExists') {\n\t\t\t\t\tdeferred.reject(new errors.TokenAlreadyExistsError());\n\t\t\t\t} else if (event.reason === 'scriptNameNotAllowed') {\n\t\t\t\t\tdeferred.reject(new errors.ScriptNameNotAllowedError());\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.reject(new errors.MultiError(event.reason));\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tsocket.emit('createSession', {\n\t\t\t\toptions: options,\n\t\t\t\tplayerParams: multi.getPlayerParams()\n\t\t\t});\n\n\t\t\treturn deferred.promise;\n\t\t});\n\t};\n\n\t/**\n\t * @returns {module:server/player~PlayerParams} an object containing\n\t * device information for this client\n\t * @private\n\t */\n\tMulti.prototype.getPlayerParams = function () {\n\t\treturn {\n\t\t\twidth: window.innerWidth,\n\t\t\theight: window.innerHeight\n\t\t};\n\t};\n\n\n\t/**\n\t * @public\n\t * @param {module:client/multi~MultiOptions} options to tweak this modules behaviour  \n\t * @returns {module:client/multi~Multi} the one and only Multi instance\n\t */\n\texports.init = function (options) {\n\t\tif (instance === null) {\n\t\t\tinstance = new Multi(options);\n\t\t\treturn instance;\n\t\t} else {\n\t\t\tthrow 'only one call to init allowed';\n\t\t}\n\t};\n\n\n\t/**\n\t * @type module:shared/errors.MultiError\n\t */\n\texports.MultiError = errors.MultiError;\n\n\t/**\n\t * @type module:shared/errors.NoSuchSessionError\n\t */\n\texports.NoSuchSessionError = errors.NoSuchSessionError;\n\n\t/**\n\t * @type module:shared/errors.TokenAlreadyExistsError\n\t */\n\texports.TokenAlreadyExistsError = errors.TokenAlreadyExistsError;\n\n\t/**\n\t * @type module:shared/errors.SessionFullError\n\t */\n\texports.SessionFullError = errors.SessionFullError;\n\n\t/**\n\t * @type module:shared/errors.NoConnectionError\n\t */\n\texports.NoConnectionError = errors.NoConnectionError;\n\n\t/**\n\t * @type module:shared/errors.NoSessionTokenFoundError\n\t */\n\texports.NoSessionTokenFoundError = errors.NoSessionTokenFoundError;\n\n\t/**\n\t * @type module:shared/errors.JoiningDisabledError\n\t */\n\texports.JoiningDisabledError = errors.JoiningDisabledError;\n\n\t/**\n\t * @type module:shared/errors.ScriptNameNotAllowedError\n\t */\n\texports.ScriptNameNotAllowedError = errors.ScriptNameNotAllowedError;\n\n\t/**\n\t * @type module:client/events.EventEmitter\n\t */\n\texports.EventEmitter = EventEmitter;\n\n\t/**\n\t * @type module:client/util\n\t */\n\texports.util = util;\n\n\t/**\n\t * @type module:shared/color\n\t */\n\texports.color = color;\n\n\t/**\n\t * @type module:client/token\n\t */\n\texports.token = token;\n\n\t/**\n\t * @type module:plugins/screens\n\t */\n\texports.screens = screensModule;\n\texports.screens.HorizontalArranger = HorizontalArranger;\n\n});\n"
  ]
}